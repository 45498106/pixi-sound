{"version":3,"file":"pixi-sound.min.js","sources":["../node_modules/es6-object-assign/index.js","../src/Filterable.ts","../src/filters/Filter.ts","../node_modules/promise-polyfill/promise.js","../src/htmlaudio/HTMLAudioInstance.ts","../src/htmlaudio/HTMLAudioMedia.ts","../src/htmlaudio/HTMLAudioContext.ts","../src/sprites/SoundSprite.ts","../src/webaudio/WebAudioInstance.ts","../src/webaudio/WebAudioNodes.ts","../src/webaudio/WebAudioMedia.ts","../src/Sound.ts","../src/utils/SoundUtils.ts","../src/loader/index.ts","../src/webaudio/WebAudioContext.ts","../src/SoundLibrary.ts","../src/filters/EqualizerFilter.ts","../src/filters/DistortionFilter.ts","../src/filters/StereoFilter.ts","../src/filters/ReverbFilter.ts","../src/filters/MonoFilter.ts","../src/filters/TelephoneFilter.ts","../src/index.ts"],"sourcesContent":["/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n'use strict';\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n","import Filter from \"./filters/Filter\";\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n * @class Filterable\n * @memberof PIXI.sound\n * @param {AudioNode} source The source audio node\n * @param {AudioNode} destination The output audio node\n * @private\n */\nexport default class Filterable\n{\n    /**\n     * Get the gain node\n     * @name PIXI.sound.Filterable#_input\n     * @type {AudioNode}\n     * @private\n     */\n    private _input: AudioNode;\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#_output\n     * @type {AudioNode}\n     * @private\n     */\n    private _output: AudioNode;\n\n    /**\n     * Collection of filters.\n     * @name PIXI.sound.Filterable#_filters\n     * @type {PIXI.sound.filters.Filter[]}\n     * @private\n     */\n    private _filters: Filter[];\n\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /**\n     * The destination output audio node\n     * @name PIXI.sound.Filterable#destination\n     * @type {AudioNode}\n     * @readonly\n     */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /**\n     * The collection of filters\n     * @name PIXI.sound.Filterable#filters\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) => {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n            filters.forEach((filter: Filter) => {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.Filterable#destroy\n     */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n","/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class Filter\n * @memberof PIXI.sound.filters\n * @param {AudioNode} destination The audio node to use as the destination for the input AudioNode\n * @param {AudioNode} [source] Optional output node, defaults to destination node. This is useful\n *        when creating filters which contains multiple AudioNode elements chained together.\n */\nexport default class Filter\n{\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#destination\n     * @type {AudioNode}\n     */\n    public destination:AudioNode;\n\n    /**\n     * The node to connect for the filter to the previous filter.\n     * @name PIXI.sound.filters.Filter#source\n     * @type {AudioNode}\n     */\n    public source:AudioNode;\n    \n    constructor(destination:AudioNode, source?:AudioNode)\n    {\n        this.destination = destination;\n        this.source = source || destination;\n    }\n\n    /**\n     * Connect to the destination.\n     * @method PIXI.sound.filters.Filter#connect\n     * @param {AudioNode} destination The destination node to connect the output to\n     */\n    connect(destination:AudioNode): void\n    {\n        this.source.connect(destination);\n    }\n\n    /**\n     * Completely disconnect filter from destination and source nodes.\n     * @method PIXI.sound.filters.Filter#disconnect\n     */\n    disconnect(): void\n    {\n        this.source.disconnect();\n    }\n\n    /**\n     * Destroy the filter and don't use after this.\n     * @method PIXI.sound.filters.Filter#destroy\n     */\n    destroy(): void\n    {\n        this.disconnect();\n        this.destination = null;\n        this.source = null;\n    }\n}\n","(function (root) {\n\n  // Store setTimeout reference so promise-polyfill will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var setTimeoutFunc = setTimeout;\n\n  function noop() {}\n  \n  // Polyfill for Function.prototype.bind\n  function bind(fn, thisArg) {\n    return function () {\n      fn.apply(thisArg, arguments);\n    };\n  }\n\n  function Promise(fn) {\n    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');\n    if (typeof fn !== 'function') throw new TypeError('not a function');\n    this._state = 0;\n    this._handled = false;\n    this._value = undefined;\n    this._deferreds = [];\n\n    doResolve(fn, this);\n  }\n\n  function handle(self, deferred) {\n    while (self._state === 3) {\n      self = self._value;\n    }\n    if (self._state === 0) {\n      self._deferreds.push(deferred);\n      return;\n    }\n    self._handled = true;\n    Promise._immediateFn(function () {\n      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n      if (cb === null) {\n        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n        return;\n      }\n      var ret;\n      try {\n        ret = cb(self._value);\n      } catch (e) {\n        reject(deferred.promise, e);\n        return;\n      }\n      resolve(deferred.promise, ret);\n    });\n  }\n\n  function resolve(self, newValue) {\n    try {\n      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');\n      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {\n        var then = newValue.then;\n        if (newValue instanceof Promise) {\n          self._state = 3;\n          self._value = newValue;\n          finale(self);\n          return;\n        } else if (typeof then === 'function') {\n          doResolve(bind(then, newValue), self);\n          return;\n        }\n      }\n      self._state = 1;\n      self._value = newValue;\n      finale(self);\n    } catch (e) {\n      reject(self, e);\n    }\n  }\n\n  function reject(self, newValue) {\n    self._state = 2;\n    self._value = newValue;\n    finale(self);\n  }\n\n  function finale(self) {\n    if (self._state === 2 && self._deferreds.length === 0) {\n      Promise._immediateFn(function() {\n        if (!self._handled) {\n          Promise._unhandledRejectionFn(self._value);\n        }\n      });\n    }\n\n    for (var i = 0, len = self._deferreds.length; i < len; i++) {\n      handle(self, self._deferreds[i]);\n    }\n    self._deferreds = null;\n  }\n\n  function Handler(onFulfilled, onRejected, promise) {\n    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n    this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n    this.promise = promise;\n  }\n\n  /**\n   * Take a potentially misbehaving resolver function and make sure\n   * onFulfilled and onRejected are only called once.\n   *\n   * Makes no guarantees about asynchrony.\n   */\n  function doResolve(fn, self) {\n    var done = false;\n    try {\n      fn(function (value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      }, function (reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      });\n    } catch (ex) {\n      if (done) return;\n      done = true;\n      reject(self, ex);\n    }\n  }\n\n  Promise.prototype['catch'] = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n\n  Promise.prototype.then = function (onFulfilled, onRejected) {\n    var prom = new (this.constructor)(noop);\n\n    handle(this, new Handler(onFulfilled, onRejected, prom));\n    return prom;\n  };\n\n  Promise.all = function (arr) {\n    var args = Array.prototype.slice.call(arr);\n\n    return new Promise(function (resolve, reject) {\n      if (args.length === 0) return resolve([]);\n      var remaining = args.length;\n\n      function res(i, val) {\n        try {\n          if (val && (typeof val === 'object' || typeof val === 'function')) {\n            var then = val.then;\n            if (typeof then === 'function') {\n              then.call(val, function (val) {\n                res(i, val);\n              }, reject);\n              return;\n            }\n          }\n          args[i] = val;\n          if (--remaining === 0) {\n            resolve(args);\n          }\n        } catch (ex) {\n          reject(ex);\n        }\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        res(i, args[i]);\n      }\n    });\n  };\n\n  Promise.resolve = function (value) {\n    if (value && typeof value === 'object' && value.constructor === Promise) {\n      return value;\n    }\n\n    return new Promise(function (resolve) {\n      resolve(value);\n    });\n  };\n\n  Promise.reject = function (value) {\n    return new Promise(function (resolve, reject) {\n      reject(value);\n    });\n  };\n\n  Promise.race = function (values) {\n    return new Promise(function (resolve, reject) {\n      for (var i = 0, len = values.length; i < len; i++) {\n        values[i].then(resolve, reject);\n      }\n    });\n  };\n\n  // Use polyfill for setImmediate for performance gains\n  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||\n    function (fn) {\n      setTimeoutFunc(fn, 0);\n    };\n\n  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n    if (typeof console !== 'undefined' && console) {\n      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n    }\n  };\n\n  /**\n   * Set the immediate function to execute callbacks\n   * @param fn {function} Function to execute\n   * @deprecated\n   */\n  Promise._setImmediateFn = function _setImmediateFn(fn) {\n    Promise._immediateFn = fn;\n  };\n\n  /**\n   * Change the function to execute on unhandled rejection\n   * @param {function} fn Function to execute on unhandled rejection\n   * @deprecated\n   */\n  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {\n    Promise._unhandledRejectionFn = fn;\n  };\n  \n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Promise;\n  } else if (!root.Promise) {\n    root.Promise = Promise;\n  }\n\n})(this);\n","import HTMLAudioMedia from \"./HTMLAudioMedia\";\nimport {IMediaInstance} from \"../interfaces/IMediaInstance\";\nimport {PlayOptions} from \"../Sound\";\n\nlet id = 0;\n\n/**\n * Instance which wraps the `<audio>` element playback.\n * @private\n * @class HTMLAudioInstance\n * @memberof PIXI.sound.htmlaudio\n */\nexport default class HTMLAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance\n{\n    /**\n     * Extra padding, in seconds, to deal with low-latecy of HTMLAudio.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance.PADDING\n     * @readonly\n     * @default 0.1\n     */\n    public static PADDING: number = 0.1;\n\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#id\n     * @readonly\n     */\n    public id: number;\n\n    /**\n     * The instance of the Audio element.\n     * @type {HTMLAudioElement}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_source\n     * @private\n     */\n    private _source: HTMLAudioElement;\n\n    /**\n     * The instance of the Audio media element.\n     * @type {PIXI.sound.htmlaudio.HTMLAudioMedia}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_media\n     * @private\n     */\n    private _media: HTMLAudioMedia;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * Current instance paused state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * Current instance muted state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_muted\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * Current actual paused state.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_pausedReal\n     * @private\n     */\n    private _pausedReal: boolean;\n\n    /**\n     * Total length of the audio.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_start\n     * @private\n     */\n    private _start: number;\n\n    /**\n     * `true` if the audio is actually playing.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_playing\n     * @private\n     */\n    private _playing: boolean;\n\n    /**\n     * Volume for the instance.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_volume\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Speed for the instance.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * `true` for looping the playback\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    constructor(parent: HTMLAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n\n        this.init(parent);  \n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        const {currentTime} = this._source;\n        return currentTime / this._duration;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {boolean}\n     * @name PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPlay(): void\n    {\n        this._playing = true;\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     */\n    private _onPause(): void\n    {\n        this._playing = false;\n    }\n\n    /**\n     * Initialize the instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#init\n     * @param {PIXI.sound.htmlaudio.HTMLAudioMedia} media\n     */\n    public init(media: HTMLAudioMedia): void\n    {\n        this._playing = false;\n        this._duration = media.source.duration;\n        const source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\n        source.src = media.parent.url;\n        source.onplay = this._onPlay.bind(this);\n        source.onpause = this._onPause.bind(this);\n        media.context.on('refresh', this.refresh, this);\n        media.context.on('refreshPaused', this.refreshPaused, this);\n        this._media = media;\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source && this._playing)\n        {\n            this._source.onended = null;\n            this._source.pause();\n        }\n    }\n\n    /**\n     * Stop the sound playing\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#stop\n     */\n    public stop(): void\n    {\n        this._internalStop();\n\n        if (this._source)\n        {\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Set the instance speed from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /**\n     * Get the set the volume for this instance from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * If the sound instance should loop playback\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * `true` if the sound is muted\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * Call whenever the loop, speed or volume changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refresh\n     */\n    public refresh(): void \n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Update the looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n        this._source.volume = instanceVolume * globalVolume * soundVolume;\n\n        // Update the speed\n        this._source.playbackRate = this._speed * global.speed * sound.speed;\n    }\n\n    /**\n     * Handle changes in paused state, either globally or sound or instance\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#refreshPaused\n     */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Handle the paused state\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.htmlaudio.HTMLAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.htmlaudio.HTMLAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play({\n                    start: this._source.currentTime,\n                    end: this._end,\n                    volume: this._volume,\n                    speed: this._speed,\n                    loop: this._loop\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.htmlaudio.HTMLAudioInstance#pause\n             * @property {boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", pausedReal);\n        }\n    }\n\n    /**\n     * Start playing the sound/\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#play\n     */\n    public play(options: PlayOptions): void\n    {\n        const {start, end, speed, loop, volume, muted} = options;\n\n        // @if DEBUG\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        // @endif\n        \n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this.refresh();\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this.loop && end !== null)\n        {\n            // @if DEBUG\n            console.warn('Looping not support when specifying an \"end\" time');\n            // @endif\n            this.loop = false;\n        }\n        \n        this._start = start;\n        this._end = end || this._duration;\n\n        // Lets expand the start and end a little\n        // to deal with the low-latecy of playing audio this way\n        // this is a little fudge-factor\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\n\n        this._source.onloadedmetadata = () => {\n            if (this._source)\n            {\n                this._source.currentTime = start;\n                this._source.onloadedmetadata = null;\n                this.emit(\"progress\", start, this._duration);\n                PIXI.ticker.shared.add(this._onUpdate, this);\n            }\n        };\n        this._source.onended = this._onComplete.bind(this);\n        this._source.play();\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#start\n         */\n        this.emit(\"start\");\n    }\n\n    /**\n     * Handle time update on sound.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onUpdate\n     * @private\n     */\n    private _onUpdate(): void\n    {\n        this.emit(\"progress\", this.progress, this._duration);\n        if (this._source.currentTime >= this._end && !this._source.loop)\n        {\n            this._onComplete();\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        PIXI.ticker.shared.remove(this._onUpdate, this);\n        this._internalStop();\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.htmlaudio.HTMLAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        PIXI.ticker.shared.remove(this._onUpdate, this);\n        this.removeAllListeners();\n\n        const source = this._source;\n\n        if (source)\n        {\n            // Remove the listeners\n            source.onended = null;\n            source.onplay = null;\n            source.onpause = null;\n\n            this._internalStop();\n        }\n\n        this._source = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._end = null;\n        this._start = 0;\n        this._duration = 0;\n        this._playing = false;\n        this._pausedReal = false;\n        this._paused = false;\n        this._muted = false;\n\n        if (this._media)\n        {\n            this._media.context.off('refresh', this.refresh, this);\n            this._media.context.off('refreshPaused', this.refreshPaused, this);\n            this._media = null;\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.htmlaudio.HTMLAudioInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[HTMLAudioInstance id=\" + this.id + \"]\";\n    }\n}\n","import {Options, LoadedCallback, CompleteCallback, PlayOptions} from '../Sound';\nimport Sound from \"../Sound\";\nimport {SoundSpriteData, SoundSprites} from \"../sprites/SoundSprite\";\nimport SoundSprite from \"../sprites/SoundSprite\";\nimport {IMedia} from '../interfaces/IMedia';\nimport HTMLAudioContext from \"./HTMLAudioContext\";\nimport HTMLAudioInstance from \"./HTMLAudioInstance\";\nimport Filter from \"../filters/Filter\";\n\n/**\n * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\n * @private\n * @class HTMLAudioMedia\n * @memberof PIXI.sound.htmlaudio\n * @param {HTMLAudioElement|String|Object} options Either the path or url to the source file.\n *        or the object of options to use. See {@link PIXI.sound.Sound.from}\n */\nexport default class HTMLAudioMedia extends PIXI.utils.EventEmitter implements IMedia\n{\n    public parent: Sound;\n    private _source: HTMLAudioElement;\n\n    init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._source = parent.options.source as HTMLAudioElement || new Audio();\n        if (parent.url)\n        {\n            this._source.src = parent.url;\n        }\n    }\n\n    // Implement create\n    public create(): HTMLAudioInstance\n    {\n        return new HTMLAudioInstance(this);\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && this._source.readyState === 4;\n    }\n\n    // Implement duration\n    public get duration(): number\n    {\n        return this._source.duration;\n    }\n\n    // Implement context\n    public get context(): HTMLAudioContext\n    {\n        return this.parent.context as HTMLAudioContext;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support filters');\n        // @endif\n    }\n\n    // Override the destroy\n    public destroy(): void\n    {\n        this.removeAllListeners();\n\n        this.parent = null;\n\n        if (this._source)\n        {\n            this._source.src = \"\";\n            this._source.load();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Get the audio source element.\n     * @name PIXI.sound.legacy.LegacySound#source\n     * @type {HTMLAudioElement}\n     * @readonly\n     */\n    public get source(): HTMLAudioElement\n    {\n        return this._source;\n    }\n\n    // Implement the method to being preloading\n    public load(callback?: LoadedCallback): void\n    {\n        const source = this._source;\n        const sound = this.parent;\n\n        // See if the source is already loaded\n        if (source.readyState === 4)\n        {\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                setTimeout(() =>\n                {\n                    callback(null, sound, instance);\n                }, 0);\n            }\n            return;\n        }\n\n        // If there's no source, we cannot load\n        if (!sound.url)\n        {\n            return callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n\n        // Set the source\n        source.src = sound.url;\n\n        // Remove all event listeners\n        const removeListeners = () =>\n        {\n            // Listen for callback\n            source.removeEventListener('canplaythrough', onLoad);\n            source.removeEventListener('load', onLoad);\n            source.removeEventListener('abort', onAbort);\n            source.removeEventListener('error', onError);\n        };\n\n        const onLoad = () =>\n        {\n            removeListeners();\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n            if (callback)\n            {\n                callback(null, sound, instance);\n            }\n        };\n\n        const onAbort = () =>\n        {\n            removeListeners();\n            if (callback)\n            {\n                callback(new Error('Sound loading has been aborted'));\n            }\n        };\n\n        const onError = () =>\n        {\n            removeListeners();\n            const message = `Failed to load audio element (code: ${source.error.code})`;\n            if (callback)\n            {\n                callback(new Error(message));\n            }\n            else\n            {\n                console.error(message);\n            }\n        };\n\n        // Listen for callback\n        source.addEventListener('canplaythrough', onLoad, false);\n        source.addEventListener('load', onLoad, false);\n        source.addEventListener('abort', onAbort, false);\n        source.addEventListener('error', onError, false);\n\n        // Begin the loading\n        source.load();\n    }\n}\n","import {IMediaContext} from \"../interfaces/IMediaContext\";\nimport Filter from \"../filters/Filter\";\n\n/**\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\n * @private\n * @class HTMLAudioContext\n * @extends PIXI.util.EventEmitter\n * @memberof PIXI.sound.htmlaudio\n */\nexport default class HTMLAudioContext extends PIXI.utils.EventEmitter implements IMediaContext\n{\n    /**\n     * Current global speed from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#speed\n     * @type {number}\n     * @default 1\n     */\n    public speed: number;\n\n    /**\n     * Current muted status of the context\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#muted\n     * @type {boolean}\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Current volume from 0 to 1\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#volume\n     * @type {number}\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#paused\n     * @type {boolean}\n     * @default false\n     */\n    public paused: boolean;\n\n    constructor()\n    {\n        super();\n\n        this.speed = 1;\n        this.volume = 1;\n        this.muted = false;\n        this.paused = false;\n    }\n\n    /**\n     * Internal trigger when volume, mute or speed changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        this.emit('refresh');\n    }\n\n    /**\n     * Internal trigger paused changes\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        this.emit('refreshPaused');\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     * @type {Array<PIXI.sound.filters.Filter>}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#filters\n     * @default null\n     */\n    public get filters(): Filter[]\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support filters');\n        // @endif\n        return null;\n    }\n    public set filters(filters: Filter[])\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support filters');\n        // @endif\n    }\n\n    /**\n     * HTML Audio does not support `audioContext`\n     * @type {null}\n     * @name PIXI.sound.htmlaudio.HTMLAudioContext#audioContext\n     * @default null\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        // @if DEBUG\n        console.warn('HTML Audio does not support audioContext');\n        // @endif\n        return null;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#toggleMute\n     * @return {boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#togglePause\n     * @return {boolean} The current paused state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n        return this.paused;\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.htmlaudio.HTMLAudioContext#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n    }\n}","import Sound from \"../Sound\";\nimport {CompleteCallback} from \"../Sound\";\nimport {IMediaInstance} from '../interfaces/IMediaInstance';\n\n// Sound sprite data setup\nexport interface SoundSpriteData {\n    start: number;\n    end: number;\n    speed?: number;\n}\n\n// Collection of sound sprites\nexport type SoundSprites = {[id: string]: SoundSprite};\n\n/**\n * Object that represents a single Sound's sprite.\n * @class SoundSprite\n * @memberof PIXI.sound\n * @param {PIXI.sound.Sound} parent The parent sound\n * @param {Object} options Data associated with object.\n * @param {number} options.start The start time in seconds.\n * @param {number} options.end The end time in seconds.\n * @param {number} [options.speed] The optional speed, if not speed, uses\n *        the default speed of the parent.\n */\nexport default class SoundSprite\n{\n    /**\n     * The reference sound\n     * @name PIXI.sound.SoundSprite#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The starting location in seconds.\n     * @name PIXI.sound.SoundSprite#start\n     * @type {number}\n     * @readonly\n     */\n    public start: number;\n\n    /**\n     * The ending location in seconds\n     * @name PIXI.sound.SoundSprite#end\n     * @type {number}\n     * @readonly\n     */\n    public end: number;\n\n    /**\n     * The speed override where 1 is 100% speed playback.\n     * @name PIXI.sound.SoundSprite#speed\n     * @type {number}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * The duration of the sound in seconds.\n     * @name PIXI.sound.SoundSprite#duration\n     * @type {number}\n     * @readonly\n     */\n    public duration: number;\n\n    /**\n     * Constructor\n     */\n    constructor(parent: Sound, options: SoundSpriteData)\n    {\n        this.parent = parent;\n        Object.assign(this, options);\n        this.duration = this.end - this.start;\n\n        // @if DEBUG\n        console.assert(this.duration > 0, \"End time must be after start time\");\n        // @endif\n    }\n\n    /**\n     * Play the sound sprite.\n     * @method PIXI.sound.SoundSprite#play\n     * @param {PIXI.sound.Sound~completeCallback} [complete] Function call when complete\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} Sound instance being played.\n     */\n    public play(complete?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>\n    {\n        return this.parent.play(Object.assign({\n            complete,\n            speed: this.speed || this.parent.speed,\n            end: this.end,\n            start: this.start,\n        }));\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @method PIXI.sound.SoundSprite#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n    }\n}\n","import WebAudioMedia from \"./WebAudioMedia\";\nimport {IMediaInstance} from \"../interfaces/IMediaInstance\";\nimport {PlayOptions} from \"../Sound\";\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @private\n * @class WebAudioInstance\n * @memberof PIXI.sound.webaudio\n * @param {SoundNodes} source Reference to the SoundNodes.\n */\nexport default class WebAudioInstance extends PIXI.utils.EventEmitter implements IMediaInstance\n{\n    /**\n     * The current unique ID for this instance.\n     * @name PIXI.sound.webaudio.WebAudioInstance#id\n     * @readonly\n     */\n    public id: number;\n\n    /**\n     * The source Sound.\n     * @type {PIXI.sound.webaudio.WebAudioMedia}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_media\n     * @private\n     */\n    private _media: WebAudioMedia;\n\n    /**\n     * true if paused.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_paused\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * true if muted.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_muted\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * true if paused.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_pausedReal\n     * @private\n     */\n    private _pausedReal: boolean;\n\n    /**\n     * The instance volume\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_volume\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * Last update frame number.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_lastUpdate\n     * @private\n     */\n    private _lastUpdate: number;\n\n    /**\n     * The total number of seconds elapsed in playback.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_elapsed\n     * @private\n     */\n    private _elapsed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_speed\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Playback rate, where 1 is 100%.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_end\n     * @private\n     */\n    private _end: number;\n\n    /**\n     * `true` if should be looping.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_loop\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * Gain node for controlling volume of instance\n     * @type {GainNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_gain\n     * @private\n     */\n    private _gain: GainNode;\n\n    /**\n     * Length of the sound in seconds.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_duration\n     * @private\n     */\n    private _duration: number;\n\n    /**\n     * The progress of the sound from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_progress\n     * @private\n     */\n    private _progress: number;\n\n    /**\n     * Callback for update listener\n     * @type {EventListener}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_updateListener\n     * @private\n     */   \n    private _updateListener: EventListener;\n\n    /**\n     * Audio buffer source clone from Sound object.\n     * @type {AudioBufferSourceNode}\n     * @name PIXI.sound.webaudio.WebAudioInstance#_source\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    constructor(media: WebAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n        this._media = null;\n        this._paused = false;\n        this._muted = false;\n        this._elapsed = 0;\n        this._updateListener = this._update.bind(this) as EventListener;\n\n        // Initialize\n        this.init(media);\n    }\n\n    /**\n     * Stops the instance, don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#stop\n     */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n\n            /**\n             * The sound is stopped. Don't use after this is called.\n             * @event PIXI.sound.webaudio.WebAudioInstance#stop\n             */\n            this.emit(\"stop\");\n        }\n    }\n\n    /**\n     * Set the instance speed from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#speed\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n        this._update(true); // update progress\n    }\n\n    /**\n     * Get the set the volume for this instance from 0 to 1\n     * @member {number} PIXI.sound.htmlaudio.HTMLAudioInstance#volume\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * `true` if the sound is muted\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#muted\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * If the sound instance should loop playback\n     * @member {boolean} PIXI.sound.htmlaudio.HTMLAudioInstance#loop\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * Refresh loop, volume and speed based on changes to parent\n     * @method PIXI.sound.webaudio.WebAudioInstance#refresh\n     */\n    public refresh(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Updating looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n        this._gain.gain.value = instanceVolume * soundVolume * globalVolume;\n\n        // Update the speed\n        this._source.playbackRate.value = this._speed * sound.speed * global.speed ;\n    }\n\n    /**\n     * Handle changes in paused state, either globally or sound or instance\n     * @method PIXI.sound.webaudio.WebAudioInstance#refreshPaused\n     */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Consider global and sound paused\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#paused\n                 */\n                this.emit(\"paused\");\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#resumed\n                 */\n                this.emit(\"resumed\");\n\n                // resume the playing with offset\n                this.play({\n                    start: this._elapsed % this._duration,\n                    end: this._end,\n                    speed: this._speed,\n                    loop: this._loop,\n                    volume: this._volume\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event PIXI.sound.webaudio.WebAudioInstance#pause\n             * @property {boolean} paused If the instance was paused or not.\n             */\n            this.emit(\"pause\", pausedReal);\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.webaudio.WebAudioInstance#play\n     * @param {Object} options Play options\n     * @param {number} options.start The position to start playing, in seconds.\n     * @param {number} options.end The ending position in seconds.\n     * @param {number} options.speed Speed for the instance\n     * @param {boolean} options.loop If the instance is looping, defaults to sound loop\n     * @param {number} options.volume Volume of the instance\n     * @param {boolean} options.muted Muted state of instance\n     */\n    public play(options: PlayOptions): void\n    {\n        const {start, end, speed, loop, volume, muted} = options;\n\n        // @if DEBUG\n        if (end)\n        {\n            console.assert(end > start, \"End time is before start time\");\n        }\n        // @endif\n        this._paused = false;\n        const {source, gain} = this._media.nodes.cloneBufferSource();\n\n        this._source = source;\n        this._gain = gain;\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this.refresh();\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this.loop && end !== null)\n        {\n            // @if DEBUG\n            console.warn('Looping not support when specifying an \"end\" time');\n            // @endif\n            this.loop = false;\n        }\n        this._end = end;\n\n        const duration: number = this._source.buffer.duration;\n\n        this._duration = duration;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n        \n        if (end)\n        {\n            this._source.start(0, start, end - start);\n        }\n        else\n        {\n            this._source.start(0, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event PIXI.sound.webaudio.WebAudioInstance#start\n         */\n        this.emit(\"start\");\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this._enabled = true;\n    }\n\n    /**\n     * Utility to convert time in millseconds or seconds\n     * @method PIXI.sound.webaudio.WebAudioInstance#_toSec\n     * @private\n     * @param {number} [time] Time in either ms or sec\n     * @return {number} Time in seconds\n     */\n    private _toSec(time?: number): number\n    {\n        if (time > 10)\n        {\n            time /= 1000;\n        }\n        return time || 0;\n    }\n\n    /**\n     * Start the update progress.\n     * @name PIXI.sound.webaudio.WebAudioInstance#_enabled\n     * @type {boolean}\n     * @private\n     */\n    private set _enabled(enabled: boolean)\n    {\n        const script = this._media.nodes.script;\n\n        script.removeEventListener('audioprocess', this._updateListener);\n\n        if (enabled)\n        {\n            script.addEventListener('audioprocess', this._updateListener);\n        }\n    }\n\n    /**\n     * The current playback progress from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioInstance#progress\n     */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioInstance#paused\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Don't use after this.\n     * @method PIXI.sound.webaudio.WebAudioInstance#destroy\n     */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        if (this._source)\n        {\n            this._source.disconnect();\n            this._source = null;\n        }\n        if (this._gain)\n        {\n            this._gain.disconnect();\n            this._gain = null;\n        }\n        if (this._media)\n        {\n            this._media.context.events.off('refresh', this.refresh, this);\n            this._media.context.events.off('refreshPaused', this.refreshPaused, this);\n            this._media = null;\n        }\n        this._end = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._paused = false;\n        this._muted = false;\n        this._pausedReal = false;\n    }\n\n    /**\n     * To string method for instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#toString\n     * @return {string} The string representation of instance.\n     * @private\n     */\n    public toString(): string\n    {\n        return \"[WebAudioInstance id=\" + this.id + \"]\";\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_now\n     * @private\n     * @return {number} Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._media.context.audioContext.currentTime;\n    }\n\n    /**\n     * Internal update the progress.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_update\n     * @private\n     */\n    private _update(force: boolean = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                const speed: number = this._source.playbackRate.value;\n                this._elapsed += delta * speed;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                const progress: number = (this._elapsed % duration) / duration;\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event PIXI.sound.webaudio.WebAudioInstance#progress\n                 * @property {number} progress Amount progressed from 0 to 1\n                 * @property {number} duration The total playback in seconds\n                 */\n                this.emit(\"progress\", this._progress, duration);\n            }\n        }\n    }\n\n    /**\n     * Initializes the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#init\n     */\n    public init(media: WebAudioMedia): void\n    {\n        this._media = media;\n        media.context.events.on('refresh', this.refresh, this);\n        media.context.events.on('refreshPaused', this.refreshPaused, this);\n    }\n\n    /**\n     * Stops the instance.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_internalStop\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n            this._source.stop();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method PIXI.sound.webaudio.WebAudioInstance#_onComplete\n     * @private\n     */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this._enabled = false;\n            this._source.onended = null;\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit(\"progress\", 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event PIXI.sound.webaudio.WebAudioInstance#end\n         */\n        this.emit(\"end\", this);\n    }\n}\n","import Filterable from \"../Filterable\";\nimport Filter from \"../filters/Filter\";\nimport WebAudioContext from \"./WebAudioContext\";\n\n/**\n * Output for cloneing node\n * @interface PIXI.sound.SoundNodes~SourceClone\n * @property {AudioBufferSourceNode} source Cloned audio buffer source\n * @property {GainNode} gain Independent volume control\n */\nexport interface SourceClone {\n    source: AudioBufferSourceNode;\n    gain: GainNode;\n};\n\n/**\n * @private\n * @class WebAudioNodes\n * @extends PIXI.sound.Filterable\n * @private\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.webaudio.WebAudioContext} audioContext The audio context.\n */\nexport default class WebAudioNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor\n     * @name PIXI.sound.SoundNodes.BUFFER_SIZE\n     * @type {number}\n     * @default 256\n     */\n    public static BUFFER_SIZE: number = 256;\n\n    /**\n     * Get the buffer source node\n     * @name PIXI.sound.SoundNodes#bufferSource\n     * @type {AudioBufferSourceNode}\n     * @readonly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the script processor node.\n     * @name PIXI.sound.SoundNodes#script\n     * @type {ScriptProcessorNode}\n     * @readonly\n     */\n    public script: ScriptProcessorNode;\n\n    /**\n     * Get the gain node\n     * @name PIXI.sound.SoundNodes#gain\n     * @type {GainNode}\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @name PIXI.sound.SoundNodes#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @name PIXI.sound.SoundNodes#context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @readonly\n     */\n    public context: WebAudioContext;\n\n    constructor(context: WebAudioContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const script: ScriptProcessorNode = audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n        script.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.script = script;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Cleans up.\n     * @method PIXI.sound.SoundNodes#destroy\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        this.script.disconnect();\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this.script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @method PIXI.sound.SoundNodes#cloneBufferSource\n     * @returns {PIXI.sound.SoundNodes~SourceClone} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): SourceClone\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const source: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n        source.buffer = orig.buffer;\n        source.playbackRate.value = orig.playbackRate.value;\n        source.loop = orig.loop;\n\n        const gain: GainNode = this.context.audioContext.createGain();\n        source.connect(gain);\n        gain.connect(this.destination);\n        return { source, gain };\n    }\n}\n","import * as path from \"path\";\nimport Filter from \"../filters/Filter\";\nimport WebAudioContext from \"./WebAudioContext\";\nimport WebAudioInstance from \"./WebAudioInstance\";\nimport WebAudioNodes from \"./WebAudioNodes\";\nimport SoundSprite from \"../sprites/SoundSprite\";\nimport {SoundSpriteData, SoundSprites} from \"../sprites/SoundSprite\";\nimport Sound from \"../Sound\";\nimport {IMedia} from \"../interfaces/IMedia\";\nimport {Options, PlayOptions, LoadedCallback, CompleteCallback} from \"../Sound\";\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n * @private\n * @class WebAudioMedia\n * @memberof PIXI.sound.webaudio\n * @param {PIXI.sound.Sound} parent - Instance of parent Sound container\n */\nexport default class WebAudioMedia implements IMedia\n{\n    /**\n     * Reference to the parent Sound container.\n     * @name PIXI.sound.webaudio.WebAudioMedia#parent\n     * @type {PIXI.sound.Sound}\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The file buffer to load.\n     * @name PIXI.sound.webaudio.WebAudioMedia#source\n     * @type {ArrayBuffer}\n     * @readonly\n     */\n    public source: ArrayBuffer;\n\n    /**\n     * Instance of the chain builder.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     * @private\n     */\n    private _nodes: WebAudioNodes;\n\n    /**\n     * Instance of the source node.\n     * @name PIXI.sound.webaudio.WebAudioMedia#_source\n     * @type {AudioBufferSourceNode}\n     * @private\n     */\n    private _source: AudioBufferSourceNode;\n\n    init(parent:Sound): void\n    {\n        this.parent = parent;\n        this._nodes = new WebAudioNodes(this.context);\n        this._source = this._nodes.bufferSource;\n        this.source = parent.options.source as ArrayBuffer;\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @private\n     * @method PIXI.sound.webaudio.WebAudioMedia#destroy\n     */\n    public destroy(): void\n    {\n        this.parent = null;\n        this._nodes.destroy();\n        this._nodes = null;\n        this._source = null;\n        this.source = null;\n    }\n\n    // Implement create\n    public create(): WebAudioInstance\n    {\n        return new WebAudioInstance(this);\n    }\n\n    // Implement context\n    public get context(): WebAudioContext\n    {\n        return this.parent.context as WebAudioContext;\n    }\n    \n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && !!this._source.buffer;\n    }\n    \n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    // Implements duration\n    public get duration(): number\n    {\n        // @if DEBUG\n        console.assert(this.isPlayable, \"Sound not yet playable, no duration\");\n        // @endif\n        return this._source.buffer.duration;\n    }\n\n    /**\n     * Gets and sets the buffer.\n     * @name PIXI.sound.webaudio.WebAudioMedia#buffer\n     * @type {AudioBuffer}\n     */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /**\n     * Get the current chained nodes object\n     * @private\n     * @name PIXI.sound.webaudio.WebAudioMedia#nodes\n     * @type {PIXI.sound.webaudio.WebAudioNodes}\n     */\n    public get nodes(): WebAudioNodes\n    {\n        return this._nodes;\n    }\n\n    // Implements load\n    public load(callback?: LoadedCallback): void\n    {\n        // Load from the file path\n        if (this.parent.url)\n        {\n            this._loadUrl(callback);\n        }\n        // Load from the arraybuffer, incase it was loaded outside\n        else if (this.source)\n        {\n            this._decode(this.source, callback);\n        }\n        else if (callback)\n        {\n            callback(new Error(\"sound.url or sound.source must be set\"));\n        }\n        else\n        {\n            console.error(\"sound.url or sound.source must be set\");\n        }\n    }\n\n    /**\n     * Loads a sound using XHMLHttpRequest object.\n     * @method PIXI.sound.webaudio.WebAudioMedia#_loadUrl\n     * @private\n     */\n    private _loadUrl(callback?: LoadedCallback): void\n    {\n        const request = new XMLHttpRequest();\n        const url: string = this.parent.url;\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n\n        // Decode asynchronously\n        request.onload = () => {\n            this.source = request.response as ArrayBuffer;\n            this._decode(request.response, callback);\n        };\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @method PIXI.sound.webaudio.WebAudioMedia#decode\n     * @param {ArrayBuffer} arrayBuffer From load.\n     * @private\n     */\n    private _decode(arrayBuffer: ArrayBuffer, callback?: LoadedCallback): void\n    {\n        const context = this.parent.context as WebAudioContext;\n        context.decode(arrayBuffer, (err: Error, buffer: AudioBuffer) =>\n        {\n            if (err)\n            {\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n            else\n            {\n                this.parent.isLoaded = true;\n                this.buffer = buffer;\n                const instance = this.parent.autoPlayStart();\n                if (callback)\n                {\n                    callback(null, this.parent, instance);\n                }\n            }\n        });\n    }\n}\n","import Filter from \"./filters/Filter\";\nimport HTMLAudioMedia from \"./htmlaudio/HTMLAudioMedia\";\nimport {IMedia} from \"./interfaces/IMedia\";\nimport {IMediaContext} from \"./interfaces/IMediaContext\";\nimport {IMediaInstance} from \"./interfaces/IMediaInstance\";\nimport SoundLibrary from \"./SoundLibrary\";\nimport SoundSprite from \"./sprites/SoundSprite\";\nimport {SoundSpriteData, SoundSprites} from \"./sprites/SoundSprite\";\nimport SoundUtils from \"./utils/SoundUtils\";\nimport WebAudioMedia from \"./webaudio/WebAudioMedia\";\n\n// Constructor options\nexport interface Options {\n    autoPlay?: boolean;\n    preaload?: boolean;\n    singleInstance?: boolean;\n    volume?: number;\n    speed?: number;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n    preload?: boolean;\n    loop?: boolean;\n    url?: string;\n    source?: ArrayBuffer|HTMLAudioElement;\n    sprites?: {[id: string]: SoundSpriteData};\n}\n\n// Interface for play options\nexport interface PlayOptions {\n    start?: number;\n    end?: number;\n    speed?: number;\n    loop?: boolean;\n    volume?: number;\n    sprite?: string;\n    muted?: boolean;\n    complete?: CompleteCallback;\n    loaded?: LoadedCallback;\n}\n\n/**\n * Callback when sound is loaded.\n * @callback PIXI.sound.Sound~loadedCallback\n * @param {Error} err The callback error.\n * @param {PIXI.sound.Sound} sound The instance of new sound.\n * @param {PIXI.sound.IMediaInstance} instance The instance of auto-played sound.\n */\nexport declare type LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @callback PIXI.sound.Sound~completeCallback\n * @param {PIXI.sound.Sound} sound The instance of sound.\n */\nexport declare type CompleteCallback = (sound: Sound) => void;\n\n/**\n * Sound represents a single piece of loaded media. When playing a sound {@link PIXI.sound.IMediaInstance} objects\n * are created. Properties such a `volume`, `pause`, `mute`, `speed`, etc will have an effect on all instances.\n * @class Sound\n * @memberof PIXI.sound\n */\nexport default class Sound\n{\n    /**\n     * Pool of instances\n     * @name PIXI.sound.Sound#_pool\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private static _pool: IMediaInstance[] = [];\n\n    /**\n     * `true` if the buffer is loaded.\n     * @name PIXI.sound.Sound#isLoaded\n     * @type {boolean}\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @name PIXI.sound.Sound#isPlaying\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @name PIXI.sound.Sound#autoPlay\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @name PIXI.sound.Sound#singleInstance\n     * @type {boolean}\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @name PIXI.sound.Sound#preload\n     * @type {boolean}\n     * @default false\n     * @readonly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @name PIXI.sound.Sound#url\n     * @type {String}\n     * @readonly\n     */\n    public url: string;\n\n    /**\n     * The constructor options.\n     * @name PIXI.sound.Sound#options\n     * @type {Object}\n     * @readonly\n     */\n    public options: Options;\n\n    /**\n     * The audio source\n     * @name PIXI.sound.Sound#media\n     * @type {PIXI.sound.IMedia}\n     * @private\n     */\n    public media: IMedia;\n\n    /**\n     * The collection of instances being played.\n     * @name PIXI.sound.Sound#_instances\n     * @type {Array<IMediaInstance>}\n     * @private\n     */\n    private _instances: IMediaInstance[];\n\n    /**\n     * Reference to the sound context.\n     * @name PIXI.sound.Sound#_sprites\n     * @type {SoundContext}\n     * @private\n     */\n    private _sprites: SoundSprites;\n\n    /**\n     * The options when auto-playing.\n     * @name PIXI.sound.Sound#_autoPlayOptions\n     * @type {PlayOptions}\n     * @private\n     */\n    private _autoPlayOptions: PlayOptions;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_volume\n     * @type {number}\n     * @private\n     */\n    private _volume: number;\n\n    /**\n     * The internal paused state.\n     * @name PIXI.sound.Sound#_paused\n     * @type {boolean}\n     * @private\n     */\n    private _paused: boolean;\n\n    /**\n     * The internal muted state.\n     * @name PIXI.sound.Sound#_muted\n     * @type {boolean}\n     * @private\n     */\n    private _muted: boolean;\n\n    /**\n     * The internal volume.\n     * @name PIXI.sound.Sound#_loop\n     * @type {boolean}\n     * @private\n     */\n    private _loop: boolean;\n\n    /**\n     * The internal playbackRate\n     * @name PIXI.sound.Sound#_speed\n     * @type {number}\n     * @private\n     */\n    private _speed: number;\n\n    /**\n     * Create a new sound instance from source.\n     * @method PIXI.sound.Sound.from\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {HTMLAudioElement|ArrayBuffer} [options.source] The source, if already preloaded.\n     * @param {boolean} [options.autoPlay=false] true to play after loading.\n     * @param {boolean} [options.preload=false] true to immediately start preloading.\n     * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback\n     *        when play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @param {boolean} [options.loop=false] true to loop the audio playback.\n     * @return {PIXI.sound.Sound} Created sound instance.\n     */\n    public static from(source: string|Options|ArrayBuffer|HTMLAudioElement): Sound\n    {\n        let options: Options = {};\n\n        if (typeof source === \"string\")\n        {\n            options.url = source as string;\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options.source = source;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = Object.assign({\n            autoPlay: false,\n            singleInstance: false,\n            url: null,\n            source: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false,\n        }, options);\n\n        // Resolve url in-case it has a special format\n        if (options.url)\n        {\n            options.url = SoundUtils.resolveUrl(options.url);\n        }\n\n        Object.freeze(options);\n\n        const media: IMedia = SoundLibrary.instance.useLegacy ?\n            new HTMLAudioMedia() :\n            new WebAudioMedia();\n\n        return new Sound(media, options);\n    }\n\n    /**\n     * Constructor, use `PIXI.sound.Sound.from`\n     * @private\n     */\n    constructor(media: IMedia, options: Options)\n    {\n        this.media = media;\n        this.options = options;\n        this._instances = [];\n        this._sprites = {};\n\n        this.media.init(this);\n\n        const complete = options.complete;\n        this._autoPlayOptions = complete ? { complete } : null;\n        this.isLoaded = false;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n        this.url = options.url;\n        this.speed = options.speed;\n        this.volume = options.volume;\n        this.loop = options.loop;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._preload(options.loaded);\n        }\n    }\n\n    /**\n     * Instance of the media context\n     * @name PIXI.sound.Sound#context\n     * @type {PIXI.sound.IMediaContext}\n     * @readonly\n     */\n    public get context(): IMediaContext\n    {\n        return SoundLibrary.instance.context;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#pause\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public pause(): Sound\n    {\n        this.isPlaying = false;\n        this.paused = true;\n        return this;\n    }\n\n    /**\n     * Resuming all the instances of this sound from playing\n     * @method PIXI.sound.Sound#resume\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public resume(): Sound\n    {\n        this.isPlaying = this._instances.length > 0;\n        this.paused = false;\n        return this;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @name PIXI.sound.Sound#paused\n     * @type {boolean}\n     * @readonly\n     */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * The playback rate\n     * @name PIXI.sound.Sound#speed\n     * @type {number}\n     */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /**\n     * Set the filters. Only supported with WebAudio.\n     * @name PIXI.sound.Sound#filters\n     * @type {Array<PIXI.sound.filters.Filter>}\n     */\n    public get filters(): Filter[]\n    {\n        return this.media.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this.media.filters = filters;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {number} data.start Time when to play the sound in seconds.\n     * @param {number} data.end Time to end playing in seconds.\n     * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @return {PIXI.sound.SoundSprite} Sound sprite result.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @method PIXI.sound.Sound#addSprites\n     * @param {Object} data Map of sounds to add where the key is the alias,\n     *        and the data are configuration options, see {@PIXI.sound.Sound#addSprite} for info on data.\n     * @return {Object} The map of sound sprites added.\n     */\n    public addSprites(sprites: {[id: string]: SoundSpriteData}): SoundSprites;\n\n    // Actual implementation\n    public addSprites(source: string|{[id: string]: SoundSpriteData}, data?: SoundSpriteData): SoundSprite|SoundSprites\n    {\n        if (typeof source === \"object\")\n        {\n            const results: SoundSprites = {};\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n            const sprite = new SoundSprite(this, data);\n            this._sprites[source] = sprite;\n            return sprite;\n        }\n    }\n\n    /**\n     * Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound.\n     * @method PIXI.sound.Sound#destroy\n     */\n    public destroy(): void\n    {\n        this._removeInstances();\n        this.removeSprites();\n        this.media.destroy();\n        this.media = null;\n        this._sprites = null;\n        this._instances = null;\n    }\n\n    /**\n     * Remove all sound sprites.\n     * @method PIXI.sound.Sound#removeSprites\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n\n    /**\n     * Remove a sound sprite.\n     * @method PIXI.sound.Sound#removeSprites\n     * @param {String} alias The unique name of the sound sprite.\n     * @return {PIXI.sound.Sound} Sound instance for chaining.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n        return this;\n    }\n\n    /**\n     * If the current sound is playable (loaded).\n     * @name PIXI.sound.Sound#isPlayable\n     * @type {boolean}\n     * @readonly\n     */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && this.media && this.media.isPlayable;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method PIXI.sound.Sound#stop\n     * @return {PIXI.sound.Sound} Instance of this sound.\n     */\n    public stop(): Sound\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method PIXI.sound.Sound#play\n     * @param {String} alias The unique name of the sound sprite.\n     * @param {object} data Either completed function or play options.\n     * @param {number} data.start Time when to play the sound in seconds.\n     * @param {number} data.end Time to end playing in seconds.\n     * @param {number} [data.speed] Override default speed, default to the Sound's speed setting.\n     * @param {PIXI.sound.Sound~completeCallback} [callback] Callback when completed.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>;\n\n    /**\n     * Plays the sound.\n     * @method PIXI.sound.Sound#play\n     * @param {PIXI.sound.Sound~completeCallback|object} options Either completed function or play options.\n     * @param {number} [options.start=0] Time when to play the sound in seconds.\n     * @param {number} [options.end] Time to end playing in seconds.\n     * @param {String} [options.sprite] Play a named sprite. Will override end, start and speed options.\n     * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {number} [options.volume] Current volume amount for instance.\n     * @param {boolean} [options.muted] Override default muted, default to the Sound's muted setting.\n     * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete] Callback when complete.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\n     *        the audio has completely finished loading and decoded.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: string|PlayOptions|CompleteCallback,\n                callback?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>;\n\n    // Overloaded function\n    public play(source?: any, complete?: CompleteCallback): IMediaInstance|Promise<IMediaInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === \"string\")\n        {\n            const sprite: string = source as string;\n            options = { sprite, complete };\n        }\n        else if (typeof source === \"function\")\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = Object.assign({\n            complete: null,\n            loaded: null,\n            sprite: null,\n            end: null,\n            start: 0,\n            volume: 1,\n            speed: 1,\n            muted: false,\n            loop: false,\n        }, options || {});\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n            // @if DEBUG\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            // @endif\n            const sprite: SoundSprite = this._sprites[alias];\n            options.start = sprite.start;\n            options.end = sprite.end;\n            options.speed = sprite.speed || 1;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset) {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            return new Promise<IMediaInstance>((resolve, reject) =>\n            {\n                this.autoPlay = true;\n                this._autoPlayOptions = options;\n                this._preload((err: Error, sound: Sound, instance: IMediaInstance) =>\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, instance);\n                        }\n                        resolve(instance);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = this._createInstance();\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once(\"end\", () => {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once(\"stop\", () => {\n            this._onComplete(instance);\n        });\n\n        instance.play(options);\n\n        return instance;\n    }\n\n    /**\n     * Internal only, speed, loop, volume change occured.\n     * @method refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        const len = this._instances.length;\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refresh();\n        }\n    }\n\n    /**\n     * Handle changes in paused state. Internal only.\n     * @method refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        const len = this._instances.length;\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refreshPaused();\n        }\n    }\n\n    /**\n     * Gets and sets the volume.\n     * @name PIXI.sound.Sound#volume\n     * @type {number}\n     */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /**\n     * Gets and sets the muted flag.\n     * @name PIXI.sound.Sound#muted\n     * @type {number}\n     */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * Gets and sets the looping.\n     * @name PIXI.sound.Sound#loop\n     * @type {boolean}\n     */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /**\n     * Starts the preloading of sound.\n     * @method PIXI.sound.Sound#_preload\n     * @private\n     */\n    private _preload(callback?: LoadedCallback): void\n    {\n        this.media.load(callback);\n    }\n\n    /**\n     * Gets the list of instances that are currently being played of this sound.\n     * @name PIXI.sound.Sound#instances\n     * @type {Array<PIXI.sound.IMediaInstance>}\n     * @readonly\n     */\n    public get instances(): IMediaInstance[]\n    {\n        return this._instances;\n    }\n\n    /**\n     * Get the map of sprites.\n     * @name PIXI.sound.Sound#sprites\n     * @type {Object}\n     * @readonly\n     */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /**\n     * Get the duration of the audio in seconds.\n     * @name PIXI.sound.Sound#duration\n     * @type {number}\n     */\n    public get duration(): number\n    {\n        return this.media.duration;\n    }\n\n    /**\n     * Auto play the first instance.\n     * @method PIXI.sound.Sound#autoPlayStart\n     * @private\n     */\n    public autoPlayStart(): IMediaInstance\n    {\n        let instance: IMediaInstance;\n        if (this.autoPlay)\n        {\n            instance = this.play(this._autoPlayOptions) as IMediaInstance;\n        }\n        return instance;\n    }\n\n    /**\n     * Removes all instances.\n     * @method PIXI.sound.Sound#_removeInstances\n     * @private\n     */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._poolInstance(this._instances[i]);\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Sound instance completed.\n     * @method PIXI.sound.Sound#_onComplete\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance\n     */\n    private _onComplete(instance: IMediaInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        this._poolInstance(instance);\n    }\n\n    /**\n     * Create a new instance.\n     * @method PIXI.sound.Sound#_createInstance\n     * @private\n     * @return {PIXI.sound.IMediaInstance} New instance to use\n     */\n    private _createInstance(): IMediaInstance\n    {\n        if (Sound._pool.length > 0)\n        {\n            const instance: IMediaInstance = Sound._pool.pop();\n            instance.init(this.media);\n            return instance;\n        }\n        return this.media.create();\n    }\n\n    /**\n     * Destroy/recycling the instance object.\n     * @method PIXI.sound.Sound#_poolInstance\n     * @private\n     * @param {PIXI.sound.IMediaInstance} instance - Instance to recycle\n     */\n    private _poolInstance(instance: IMediaInstance): void\n    {\n        instance.destroy();\n        // Add it if it isn't already added\n        if (Sound._pool.indexOf(instance) < 0)\n        {\n            Sound._pool.push(instance);\n        }\n    }\n}\n","import SoundLibrary from \"../SoundLibrary\";\nimport Sound from \"../Sound\";\nimport WebAudioMedia from \"../webaudio/WebAudioMedia\";\nimport WebAudioContext from \"../webaudio/WebAudioContext\";\n\nexport interface RenderOptions {\n    width?: number;\n    height?: number;\n    fill?: string|CanvasPattern|CanvasGradient;\n}\n\nexport type ExtensionMap = {[key:string]:boolean};\n\n/**\n * Utilities that work with sounds.\n * @namespace PIXI.sound.utils\n */\nexport default class SoundUtils\n{\n    /**\n     * Increment the alias for play once\n     * @static\n     * @private\n     * @default 0\n     */\n    private static PLAY_ID = 0;\n\n    /**\n     * RegExp for looking for format patterns.\n     * @static\n     * @private\n     */\n    private static FORMAT_PATTERN = /\\.(\\{([^\\}]+)\\})(\\?.*)?$/;\n\n    /**\n     * The list of extensions that can be played.\n     * @readonly\n     * @static\n     * @member {string[]} PIXI.sound.utils.extensions\n     */\n    public static extensions:string[] = [\n        \"mp3\",\n        \"ogg\",\n        \"oga\",\n        \"opus\",\n        \"mpeg\",\n        \"wav\",\n        \"m4a\",\n        \"mp4\",\n        \"aiff\",\n        \"wma\",\n        \"mid\"\n    ];\n\n    /**\n     * The list of browser supported audio formats.\n     * @readonly\n     * @static\n     * @member {Object} PIXI.sound.utils.supported\n     * @property {boolean} mp3 - `true` if file-type is supported\n     * @property {boolean} ogg - `true` if file-type is supported\n     * @property {boolean} oga - `true` if file-type is supported\n     * @property {boolean} opus - `true` if file-type is supported\n     * @property {boolean} mpeg - `true` if file-type is supported\n     * @property {boolean} wav - `true` if file-type is supported\n     * @property {boolean} mp4 - `true` if file-type is supported\n     * @property {boolean} aiff - `true` if file-type is supported\n     * @property {boolean} wma - `true` if file-type is supported\n     * @property {boolean} mid - `true` if file-type is supported\n     */\n    public static supported:ExtensionMap = function():ExtensionMap {\n        const types:{[key:string]:string} = {\n            m4a: \"mp4\",\n            oga: \"ogg\"\n        };\n        const audio = document.createElement('audio');\n        const formats:ExtensionMap = {};\n        const no = /^no$/;\n        SoundUtils.extensions.forEach(ext => {\n            const type = types[ext] || ext;\n            const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, '');\n            const canByType = audio.canPlayType(`audio/${type}`).replace(no, '');\n            formats[ext] = !!canByExt || !!canByType;\n        });\n\n        return Object.freeze(formats);\n    }();\n\n    /**\n     * Resolve a URL with different formats in glob pattern to \n     * a path based on the supported browser format. For instance:\n     * \"sounds/music.{ogg,mp3}\", would resolve to \"sounds/music.ogg\"\n     * if \"ogg\" support is found, otherwise, fallback to \"sounds.music.mp3\"\n     * @method PIXI.sound.utils.resolveUrl\n     * @static\n     * @param {string|PIXI.loaders.Resource} source - Path to resolve or Resource, if\n     *        a Resource object is provided, automatically updates the extension and url\n     *        of that object.\n     * @return {string} The format to resolve to\n     */\n    public static resolveUrl(source: string|PIXI.loaders.Resource): string\n    {\n        // search for patterns like \".{mp3,ogg}\"\"\n        const glob = SoundUtils.FORMAT_PATTERN;\n        const url:string = typeof source === 'string' ? source : source.url;\n\n        if (!glob.test(url))\n        {\n            return url;\n        }\n        else\n        {\n            const match = glob.exec(url);\n            const exts = match[2].split(',');\n            let replace = exts[exts.length - 1]; // fallback to last ext\n            for (let i = 0, len = exts.length; i < len; i++)\n            {\n                const ext = exts[i];\n                if (SoundUtils.supported[ext])\n                {\n                    replace = ext;\n                    break;\n                }\n            }\n            const resolved = url.replace(match[1], replace);\n            if (!(typeof source === 'string'))\n            {\n                source.extension = replace;\n                source.url = resolved;\n            }\n            return resolved;\n        }\n    }\n\n    /**\n     * Create a new sound for a sine wave-based tone.  **Only supported with WebAudio**\n     * @method PIXI.sound.utils.sineTone\n     * @param {number} [hertz=200] Frequency of sound.\n     * @param {number} [seconds=1] Duration of sound in seconds.\n     * @return {PIXI.sound.Sound} New sound.\n     */\n    public static sineTone(hertz: number = 200, seconds: number = 1): Sound\n    {\n        const sound = Sound.from({\n            singleInstance: true,\n        });\n\n        if (!(sound.media instanceof WebAudioMedia))\n        {\n            return sound;\n        }\n\n        const media = sound.media as WebAudioMedia;\n        const context = sound.context as WebAudioContext;\n\n        // set default value\n        const nChannels = 1;\n        const sampleRate = 48000;\n        const amplitude = 2;\n\n        // create the buffer\n        const buffer = context.audioContext.createBuffer(\n            nChannels,\n            seconds * sampleRate,\n            sampleRate,\n        );\n        const fArray = buffer.getChannelData(0);\n\n        // fill the buffer\n        for (let i = 0; i < fArray.length; i++)\n        {\n            const time  = i / buffer.sampleRate;\n            const angle = hertz * time * Math.PI;\n            fArray[i] = Math.sin(angle) * amplitude;\n        }\n\n        // set the buffer\n        media.buffer = buffer;\n        sound.isLoaded = true;\n        return sound;\n    }\n\n    /**\n     * Render image as Texture. **Only supported with WebAudio**\n     * @method PIXI.sound.utils.render\n     * @param {PIXI.sound.Sound} sound Instance of sound to render\n     * @param {Object} [options] Custom rendering options\n     * @param {number} [options.width=512] Width of the render\n     * @param {number} [options.height=128] Height of the render\n     * @param {string|CanvasPattern|CanvasGradient} [options.fill='black'] Fill style for waveform\n     * @return {PIXI.Texture} Result texture\n     */\n    public static render(sound: Sound, options?: RenderOptions): PIXI.BaseTexture\n    {\n        const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n        options = Object.assign({\n            width: 512,\n            height: 128,\n            fill: \"black\",\n        }, options || {});\n\n        canvas.width = options.width;\n        canvas.height = options.height;\n\n        const baseTexture = PIXI.BaseTexture.fromCanvas(canvas);\n\n        if (!(sound.media instanceof WebAudioMedia))\n        {\n            return baseTexture;\n        }\n\n        const media: WebAudioMedia = sound.media as WebAudioMedia;\n\n        console.assert(!!media.buffer, \"No buffer found, load first\");        \n\n        const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n        context.fillStyle = options.fill;\n        const data: Float32Array = media.buffer.getChannelData(0);\n        const step: number = Math.ceil(data.length / options.width);\n        const amp: number = options.height / 2;\n\n        for (let i: number = 0; i < options.width; i++)\n        {\n            let min: number = 1.0;\n            let max: number = -1.0;\n\n            for (let j: number = 0; j < step; j++)\n            {\n                const datum: number = data[(i * step) + j];\n\n                if (datum < min)\n                {\n                    min = datum;\n                }\n                if (datum > max)\n                {\n                    max = datum;\n                }\n            }\n            context.fillRect(i, (1 + min) * amp, 1, Math.max(1, (max - min) * amp));\n        }\n        return baseTexture;\n    }\n\n    /**\n     * Create a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\n     * @method PIXI.sound.utils.playOnce\n     * @static\n     * @param {String} fileName Full path of the file to play.\n     * @param {Function} callback Callback when complete.\n     * @return {string} New audio element alias.\n     */\n    public static playOnce(url: string, callback?: (err?: Error) => void): string\n    {\n        const alias = `alias${SoundUtils.PLAY_ID++}`;\n\n        SoundLibrary.instance.add(alias, {\n            url,\n            preload: true,\n            autoPlay: true,\n            loaded: (err: Error) => {\n                if (err)\n                {\n                    console.error(err);\n                    SoundLibrary.instance.remove(alias);\n                    if (callback)\n                    {\n                        callback(err);\n                    }\n                }\n            },\n            complete: () => {\n                SoundLibrary.instance.remove(alias);\n                if (callback)\n                {\n                    callback(null);\n                }\n            },\n        });\n        return alias;\n    }\n}\n","import SoundLibrary from \"../SoundLibrary\";\nimport SoundUtils from \"../utils/SoundUtils\";\n\n/**\n * Sound middleware installation utilities for PIXI.loaders.Loader\n * @namespace PIXI.sound.loader\n * @private\n */\nexport default class LoaderMiddleware\n{\n    /**\n     * @name PIXI.sound.loader._sound\n     * @type {PIXI.sound}\n     * @static\n     * @private\n     */\n    static _sound: SoundLibrary;\n\n    /**\n     * Install the middleware\n     * @method PIXI.sound.loader.install\n     * @param {PIXI.sound.SoundLibrary} sound - Instance of sound library\n     */\n    static install(sound:SoundLibrary)\n    {\n        LoaderMiddleware._sound = sound;\n        LoaderMiddleware.legacy = sound.useLegacy;\n\n        // Monkey-patch the PIXI.loaders.Loader class\n        // to support using the resolve loader middleware\n        const Loader = PIXI.loaders.Loader;\n        const SoundLoader = function(baseUrl?:string, concurrency?:number) {\n            Loader.call(this, baseUrl, concurrency);\n            this.use(LoaderMiddleware.plugin);\n            this.pre(LoaderMiddleware.resolve);\n        };\n        SoundLoader.prototype = Loader.prototype;\n        (PIXI.loaders as any).Loader = SoundLoader;\n\n        // Install middleware on the default loader\n        PIXI.loader.use(LoaderMiddleware.plugin);\n        PIXI.loader.pre(LoaderMiddleware.resolve);\n    }\n\n    /**\n     * Set the legacy mode\n     * @name PIXI.sound.loader.legacy\n     * @type {boolean}\n     * @private\n     */\n    static set legacy(legacy:boolean)\n    {\n        // Configure PIXI Loader to handle audio files correctly\n        const Resource = PIXI.loaders.Resource;\n        const exts = SoundUtils.extensions;\n\n        // Make sure we support webaudio\n        if (!legacy)\n        {\n            // Load all audio files as ArrayBuffers\n            exts.forEach((ext) => {\n                Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.BUFFER);\n                Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.XHR);\n            });\n        }\n        else\n        {\n            // Fall back to loading as <audio> elements\n            exts.forEach((ext) => {\n                Resource.setExtensionXhrType(ext, Resource.XHR_RESPONSE_TYPE.DEFAULT);\n                Resource.setExtensionLoadType(ext, Resource.LOAD_TYPE.AUDIO);\n            });\n        }\n    }\n\n    /**\n     * Handle the preprocessing of file paths\n     */\n    private static resolve(resource: PIXI.loaders.Resource, next: () => void): void\n    {\n        SoundUtils.resolveUrl(resource);\n        next();\n    }\n\n    /**\n     * Actual resource-loader middleware for sound class\n     */\n    private static plugin(resource: PIXI.loaders.Resource, next: () => void): void\n    {\n        if (resource.data && SoundUtils.extensions.indexOf(resource.extension) > -1)\n        {\n            (resource as any).sound = LoaderMiddleware._sound.add(resource.name, {\n                loaded: next,\n                preload: true,\n                url: resource.url,\n                source: resource.data,\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n}\n","import Filterable from \"../Filterable\";\nimport { IMediaContext } from \"../interfaces/IMediaContext\";\n\n/**\n * Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > compressor > context.destination.\n * any filters that are added are inserted between the analyser and compressor nodes\n * @private\n * @class WebAudioContext\n * @extends PIXI.sound.Filterable\n * @memberof PIXI.sound.webaudio\n */\nexport default class WebAudioContext extends Filterable implements IMediaContext\n{\n    /**\n     * Context Compressor node\n     * @name PIXI.sound.webaudio.WebAudioContext#compressor\n     * @type {DynamicsCompressorNode}\n     * @readonly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @name PIXI.sound.webaudio.WebAudioContext#analyser\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Global speed of all sounds\n     * @name PIXI.sound.webaudio.WebAudioContext#speed\n     * @type {AnalyserNode}\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * Sets the muted state.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#muted\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {number}\n     * @name PIXI.sound.webaudio.WebAudioContext#volume\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Handle global events\n     * @type {PIXI.utils.EventEmitter}\n     * @name PIXI.sound.webaudio.WebAudioContext#events\n     * @default 1\n     */\n    public events: PIXI.utils.EventEmitter;\n\n    /**\n     * The instance of the AudioContext for WebAudio API.\n     * @name PIXI.sound.webaudio.WebAudioContext#_ctx\n     * @type {AudioContext}\n     * @private\n     */\n    private _ctx: AudioContext;\n\n    /**\n     * The instance of the OfflineAudioContext for fast decoding audio.\n     * @name PIXI.sound.webaudio.WebAudioContext#_offlineCtx\n     * @type {OfflineAudioContext}\n     * @private\n     */\n    private _offlineCtx: OfflineAudioContext;\n\n    /**\n     * Current paused status\n     * @name PIXI.sound.webaudio.WebAudioContext#_paused\n     * @type {boolean}\n     * @private\n     * @default false\n     */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     * @name PIXI.sound.webaudio.WebAudioContext#_unlocked\n     * @type {boolean}\n     * @private\n     */\n    private _unlocked: boolean;\n\n    constructor()\n    {\n        const ctx = new WebAudioContext.AudioContext();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, compressor);\n\n        this._ctx = ctx;\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2, ctx.sampleRate);\n        this._unlocked = false;\n\n        this.compressor = compressor;\n        this.analyser = analyser;\n        this.events = new PIXI.utils.EventEmitter();\n\n        // Set the defaults\n        this.volume = 1;\n        this.speed = 1;\n        this.muted = false;\n        this.paused = false;\n\n        // Listen for document level clicks to unlock WebAudio on iOS. See the _unlock method.\n        if (\"ontouchstart\" in window && ctx.state !== \"running\")\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener(\"mousedown\", this._unlock, true);\n            document.addEventListener(\"touchstart\", this._unlock, true);\n            document.addEventListener(\"touchend\", this._unlock, true);\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     * @method PIXI.sound.webaudio.WebAudioContext#_unlock\n     * @private\n     */\n    private _unlock(): void\n    {\n        if (this._unlocked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === \"running\")\n        {\n            document.removeEventListener(\"mousedown\", this._unlock, true);\n            document.removeEventListener(\"touchend\", this._unlock, true);\n            document.removeEventListener(\"touchstart\", this._unlock, true);\n            this._unlocked = true;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     * @method PIXI.sound.webaudio.WebAudioContext#playEmptySound\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.AudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.AudioContext ||\n            win.webkitAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @name PIXI.sound.webaudio.WebAudioContext.OfflineAudioContext\n     * @type {Function}\n     * @static\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n        return (\n            win.OfflineAudioContext ||\n            win.webkitOfflineAudioContext ||\n            null\n        );\n    }\n\n    /**\n     * Destroy this context.\n     * @method PIXI.sound.webaudio.WebAudioContext#destroy\n     */\n    public destroy()\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n        if (typeof ctx.close !== \"undefined\")\n        {\n            ctx.close();\n        }\n        this.events.removeAllListeners();\n        this.analyser.disconnect();\n        this.compressor.disconnect();\n        this.analyser = null;\n        this.compressor = null;\n        this.events = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#audioContext\n     * @type {AudioContext}\n     * @readonly\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @name PIXI.sound.webaudio.WebAudioContext#offlineContext\n     * @type {OfflineAudioContext}\n     * @readonly\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Pauses all sounds, even though we handle this at the instance\n     * level, we'll also pause the audioContext so that the \n     * time used to compute progress isn't messed up.\n     * @type {boolean}\n     * @name PIXI.sound.webaudio.WebAudioContext#paused\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === \"running\")\n        {\n            (this._ctx as any).suspend();\n        }\n        else if (!paused && this._ctx.state === \"suspended\")\n        {\n            (this._ctx as any).resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Emit event when muted, volume or speed changes\n     * @method PIXI.sound.webaudio.WebAudioContext#refresh\n     * @private\n     */\n    public refresh(): void\n    {\n        this.events.emit('refresh');\n    }\n\n    /**\n     * Emit event when muted, volume or speed changes\n     * @method PIXI.sound.webaudio.WebAudioContext#refreshPaused\n     * @private\n     */\n    public refreshPaused(): void\n    {\n        this.events.emit('refreshPaused');\n    }\n\n\n    /**\n     * Toggles the muted state.\n     * @method PIXI.sound.webaudio.WebAudioContext#toggleMute\n     * @return {boolean} The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @method PIXI.sound.webaudio.WebAudioContext#togglePause\n     * @return {boolean} The current muted state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n        return this._paused;\n    }\n\n    /**\n     * Decode the audio data\n     * @method decode\n     * @param {ArrayBuffer} arrayBuffer Buffer from loader\n     * @param {Function} callback When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) => {\n                callback(null, buffer);\n            },\n            () => {\n                callback(new Error(\"Unable to decode file\"));\n            },\n        );\n    }\n}\n","import ObjectAssign from \"es6-object-assign\";\nimport PromisePolyfill from \"promise-polyfill\";\nimport Filterable from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport Filter from \"./filters/Filter\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport {HTMLAudioContext} from \"./htmlaudio\";\nimport {IMediaContext} from \"./interfaces/IMediaContext\";\nimport {IMediaInstance} from \"./interfaces/IMediaInstance\";\nimport LoaderMiddleware from \"./loader\";\nimport {CompleteCallback, Options, PlayOptions} from \"./Sound\";\nimport Sound from \"./Sound\";\nimport SoundSprite from \"./sprites/SoundSprite\";\nimport utils from \"./utils/SoundUtils\";\nimport {WebAudioContext} from \"./webaudio\";\nimport * as webaudio from \"./webaudio\";\n\nexport type SoundMap = {[id: string]: Options|string|ArrayBuffer|HTMLAudioElement};\n\n/**\n * Contains all of the functionality for using the **pixi-sound** library.\n * This is deisnged to play audio with WebAudio and fallback to HTML5.\n * @namespace PIXI.sound\n */\n\n/**\n * @description Manages the playback of sounds.\n * @class SoundLibrary\n * @memberof PIXI.sound\n * @private\n */\nexport default class SoundLibrary\n{\n    /**\n     * Singleton instance\n     */\n    public static instance: SoundLibrary;\n\n    /**\n     * For legacy approach for Audio. Instead of using WebAudio API\n     * for playback of sounds, it will use HTML5 `<audio>` element.\n     * @name PIXI.sound#_useLegacy\n     * @type {boolean}\n     * @default false\n     * @private\n     */\n    private _useLegacy: boolean;\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#_context\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _context: IMediaContext;\n\n    /**\n     * The WebAudio specific context\n     * @name PIXI.sound#_webAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _webAudioContext: WebAudioContext;\n\n    /**\n     * The HTML Audio (legacy) context.\n     * @name PIXI.sound#_htmlAudioContext\n     * @type {PIXI.sound.webaudio.WebAudioContext}\n     * @private\n     */\n    private _htmlAudioContext: HTMLAudioContext;\n\n    /**\n     * The map of all sounds by alias.\n     * @name PIXI.sound#_sounds\n     * @type {Object}\n     * @private\n     */\n    private _sounds: {[id: string]: Sound};\n\n    constructor()\n    {\n        if (this.supported)\n        {\n            this._webAudioContext = new WebAudioContext();\n        }\n        this._htmlAudioContext = new HTMLAudioContext();\n        this._sounds = {};\n        this.useLegacy = !this.supported;\n    }\n\n    /**\n     * The global context to use.\n     * @name PIXI.sound#context\n     * @readonly\n     * @type {PIXI.sound.IMediaContext}\n     */\n    public get context(): IMediaContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Initialize the singleton of the library\n     * @method PIXI.sound.SoundLibrary.init\n     * @return {PIXI.sound}\n     */\n    public static init(): SoundLibrary\n    {\n        if (SoundLibrary.instance)\n        {\n            throw new Error(\"SoundLibrary is already created\");\n        }\n        const instance = SoundLibrary.instance = new SoundLibrary();\n\n        // Apply polyfills\n        if (typeof Object.assign === \"undefined\")\n        {\n            ObjectAssign.polyfill();\n        }\n\n        if (typeof Promise === \"undefined\")\n        {\n            (window as any).Promise = PromisePolyfill;\n        }\n\n        // In some cases loaders can be not included\n        // the the bundle for PixiJS, custom builds\n        if (typeof PIXI.loaders !== \"undefined\")\n        {\n            // Install the middleware to support\n            // PIXI.loader and new PIXI.loaders.Loader\n            LoaderMiddleware.install(instance);\n        }\n\n        // Remove the global namespace created by rollup\n        // makes it possible for users to opt-in to exposing\n        // the library globally\n        if (typeof (window as any).__pixiSound === \"undefined\")\n        {\n            delete (window as any).__pixiSound;\n        }\n\n        // Webpack and NodeJS-like environments will not expose\n        // the library to the window by default, user must opt-in\n        if (typeof module === \"undefined\")\n        {\n            instance.global();\n        }\n\n        return instance;\n    }\n\n    /**\n     * Set the `PIXI.sound` window namespace object. By default\n     * the global namespace is disabled in environments that use\n     * require/module (e.g. Webpack), so `PIXI.sound` would not\n     * be accessible these environments. Window environments\n     * will automatically expose the window object, calling this\n     * method will do nothing.\n     * @method PIXI.sound#global\n     * @example\n     * import {sound} from 'pixi-sound';\n     * sound.global(); // Now can use PIXI.sound\n     */\n    public global(): void\n    {\n        const PixiJS = PIXI as any;\n\n        if (!PixiJS.sound)\n        {\n            Object.defineProperty(PixiJS, \"sound\",\n            {\n                get() { return SoundLibrary.instance; },\n            });\n\n            Object.defineProperties(SoundLibrary.instance,\n            {\n                filters: { get() { return filters; } },\n                htmlaudio: { get() { return htmlaudio; } },\n                webaudio: { get() { return webaudio; } },\n                utils: { get() { return utils; } },\n                Sound: { get() { return Sound; } },\n                SoundSprite: { get() { return SoundSprite; } },\n                Filterable: { get() { return Filterable; } },\n                SoundLibrary: { get() { return SoundLibrary; } },\n            });\n        }\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * **Only supported with WebAudio.**\n     * @example\n     * // Adds a filter to pan all output left\n     * PIXI.sound.filtersAll = [\n     *     new PIXI.sound.filters.StereoFilter(-1)\n     * ];\n     * @name PIXI.sound#filtersAll\n     * @type {PIXI.sound.filters.Filter[]}\n     */\n    public get filtersAll(): Filter[]\n    {\n        if (!this.useLegacy)\n        {\n            return this._context.filters;\n        }\n        return [];\n    }\n    public set filtersAll(filters: Filter[])\n    {\n        if (!this.useLegacy)\n        {\n            this._context.filters = filters;\n        }\n    }\n\n    /**\n     * `true` if WebAudio is supported on the current browser.\n     * @name PIXI.sound#supported\n     * @readonly\n     * @type {boolean}\n     */\n    public get supported(): boolean\n    {\n        return WebAudioContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {PIXI.sound.Sound} sound Sound reference to use.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @method PIXI.sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {ArrayBuffer|String|Object|HTMLAudioElement} options Either the path or url to the source file.\n     *        or the object of options to use.\n     * @param {String} [options.url] If `options` is an object, the source of file.\n     * @param {ArrayBuffer|HTMLAudioElement} [options.source] If sound is already preloaded, available.\n     * @param {boolean} [options.autoPlay=false] true to play after loading.\n     * @param {boolean} [options.preload=false] true to immediately start preloading.\n     * @param {boolean} [options.singleInstance=false] `true` to disallow playing multiple layered instances at once.\n     * @param {number} [options.volume=1] The amount of volume 1 = 100%.\n     * @param {number} [options.speed=1] The playback rate where 1 is 100% speed.\n     * @param {Object} [options.sprites] The map of sprite data. Where a sprite is an object\n     *        with a `start` and `end`, which are the times in seconds. Optionally, can include\n     *        a `speed` amount where 1 is 100% speed.\n     * @param {PIXI.sound.Sound~completeCallback} [options.complete=null] Global complete callback when\n     *        play is finished.\n     * @param {PIXI.sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n     * @return {PIXI.sound.Sound} Instance of the Sound object.\n     */\n    public add(alias: string, options: Options|string|ArrayBuffer|HTMLAudioElement|Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @method PIXI.sound#add\n     * @param {Object} map Map of sounds to add, the key is the alias, the value is the\n     *        `string`, `ArrayBuffer`, `HTMLAudioElement` or the list of options\n     *        (see {@link PIXI.sound.add} for options).\n     * @param {Object} globalOptions The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return {PIXI.sound.Sound} Instance to the Sound object.\n     */\n    public add(map: SoundMap, globalOptions?: Options): {[id: string]: Sound};\n\n    // Actual method\n    public add(source: string|SoundMap, sourceOptions?: Options|string|ArrayBuffer|HTMLAudioElement|Sound):\n        {[id: string]: Sound}|Sound\n    {\n        if (typeof source === \"object\")\n        {\n            const results: {[id: string]: Sound} = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n                results[alias] = this.add(alias, options);\n            }\n            return results;\n        }\n        else if (typeof source === \"string\")\n        {\n            // @if DEBUG\n            console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n            // @endif\n\n            if (sourceOptions instanceof Sound)\n            {\n                this._sounds[source] = sourceOptions;\n                return sourceOptions;\n            }\n            else\n            {\n                const options: Options = this._getOptions(sourceOptions);\n                const sound: Sound = Sound.from(options);\n                this._sounds[source] = sound;\n                return sound;\n            }\n        }\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @method PIXI.sound#_getOptions\n     * @private\n     * @param {string|ArrayBuffer|HTMLAudioElement|Object} source The source options\n     * @param {Object} [overrides] Override default options\n     * @return {Object} The construction options\n     */\n    private _getOptions(source: string|ArrayBuffer|HTMLAudioElement|Options, overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === \"string\")\n        {\n            options = { url: source };\n        }\n        else if (source instanceof ArrayBuffer || source instanceof HTMLAudioElement)\n        {\n            options = { source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        return Object.assign(options, overrides || {}) as Options;\n    }\n\n    /**\n     * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n     * @name PIXI.sound#useLegacy\n     * @type {boolean}\n     */\n    public get useLegacy(): boolean\n    {\n        return this._useLegacy;\n    }\n    public set useLegacy(legacy: boolean)\n    {\n        LoaderMiddleware.legacy = legacy;\n        this._useLegacy = legacy;\n\n        // Set the context to use\n        if (!legacy && this.supported)\n        {\n            this._context = this._webAudioContext;\n        }\n        else\n        {\n            this._context = this._htmlAudioContext;\n        }\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @method PIXI.sound#remove\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public remove(alias: string): SoundLibrary\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link PIXI.sound#volume}.\n     * @name PIXI.sound#volumeAll\n     * @type {number}\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n        this._context.refresh();\n    }\n\n    /**\n     * Set the global speed for all sounds. To set per-sound speed see {@link PIXI.sound#speed}.\n     * @name PIXI.sound#speedAll\n     * @type {number}\n     */\n    public get speedAll(): number\n    {\n        return this._context.speed;\n    }\n    public set speedAll(speed: number)\n    {\n        this._context.speed = speed;\n        this._context.refresh();\n    }\n\n    /**\n     * Toggle paused property for all sounds.\n     * @method PIXI.sound#togglePauseAll\n     * @return {boolean} `true` if all sounds are paused.\n     */\n    public togglePauseAll(): boolean\n    {\n        return this._context.togglePause();\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @method PIXI.sound#pauseAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public pauseAll(): SoundLibrary\n    {\n        this._context.paused = true;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @method PIXI.sound#resumeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resumeAll(): SoundLibrary\n    {\n        this._context.paused = false;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Toggle muted property for all sounds.\n     * @method PIXI.sound#toggleMuteAll\n     * @return {boolean} `true` if all sounds are muted.\n     */\n    public toggleMuteAll(): boolean\n    {\n        return this._context.toggleMute();\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @method PIXI.sound#muteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public muteAll(): SoundLibrary\n    {\n        this._context.muted = true;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @method PIXI.sound#unmuteAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public unmuteAll(): SoundLibrary\n    {\n        this._context.muted = false;\n        this._context.refresh();\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @method PIXI.sound#removeAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public removeAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @method PIXI.sound#stopAll\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public stopAll(): SoundLibrary\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @method PIXI.sound#exists\n     * @param {String} alias Check for alias.\n     * @return {boolean} true if the sound exists.\n     */\n    public exists(alias: string, assert: boolean= false): boolean\n    {\n        const exists = !!this._sounds[alias];\n        if (assert)\n        {\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n        return exists;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @method PIXI.sound#find\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {String} sprite The alias of the sprite to play.\n     * @return {PIXI.sound.IMediaInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @method PIXI.sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {Object|Function} options The options or callback when done.\n     * @param {Function} [options.complete] When completed.\n     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\n     * @param {number} [options.start=0] Start time offset.\n     * @param {number} [options.end] End time offset.\n     * @param {number} [options.speed] Override default speed, default to the Sound's speed setting.\n     * @param {boolean} [options.loop] Override default loop, default to the Sound's loop setting.\n     * @return {PIXI.sound.IMediaInstance|Promise<PIXI.sound.IMediaInstance>} The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, options?: PlayOptions|CompleteCallback|string): IMediaInstance|Promise<IMediaInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @method PIXI.sound#stop\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @method PIXI.sound#pause\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound.Sound} Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @method PIXI.sound#resume\n     * @param {String} alias The sound alias reference.\n     * @return {PIXI.sound} Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @method PIXI.sound#volume\n     * @param {String} alias The sound alias reference.\n     * @param {number} [volume] Optional current volume to set.\n     * @return {number} The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n        if (volume !== undefined) {\n            sound.volume = volume;\n        }\n        return sound.volume;\n    }\n\n    /**\n     * Get or set the speed for a sound.\n     * @method PIXI.sound#speed\n     * @param {String} alias The sound alias reference.\n     * @param {number} [speed] Optional current speed to set.\n     * @return {number} The current speed.\n     */\n    public speed(alias: string, speed?: number): number\n    {\n        const sound = this.find(alias);\n        if (speed !== undefined) {\n            sound.speed = speed;\n        }\n        return sound.speed;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @method PIXI.sound#duration\n     * @param {String} alias The sound alias reference.\n     * @return {number} The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Destroys the sound module.\n     * @method PIXI.sound#destroy\n     * @private\n     */\n    public destroy(): void\n    {\n        this.removeAll();\n        this._sounds = null;\n        this._context = null;\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\ninterface Band {\n    f:number;\n    type:string;\n    gain:number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @class EqualizerFilter\n * @memberof PIXI.sound.filters\n * @param {number} [f32=0] Default gain for 32 Hz\n * @param {number} [f64=0] Default gain for 64 Hz\n * @param {number} [f125=0] Default gain for 125 Hz\n * @param {number} [f250=0] Default gain for 250 Hz\n * @param {number} [f500=0] Default gain for 500 Hz\n * @param {number} [f1k=0] Default gain for 1000 Hz\n * @param {number} [f2k=0] Default gain for 2000 Hz\n * @param {number} [f4k=0] Default gain for 4000 Hz\n * @param {number} [f8k=0] Default gain for 8000 Hz\n * @param {number} [f16k=0] Default gain for 16000 Hz\n */\nexport default class EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F32\n     * @type {number}\n     * @readonly\n     */\n    public static F32:number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F64\n     * @type {number}\n     * @readonly\n     */\n    public static F64:number = 64;\n    \n    /**\n     * Band at 125 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F125\n     * @type {number}\n     * @readonly\n     */\n    public static F125:number = 125;\n    \n    /**\n     * Band at 250 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F250\n     * @type {number}\n     * @readonly\n     */\n    public static F250:number = 250;\n    \n    /**\n     * Band at 500 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F500\n     * @type {number}\n     * @readonly\n     */\n    public static F500:number = 500;\n    \n    /**\n     * Band at 1000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F1K\n     * @type {number}\n     * @readonly\n     */\n    public static F1K:number = 1000;\n    \n    /**\n     * Band at 2000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F2K\n     * @type {number}\n     * @readonly\n     */\n    public static F2K:number = 2000;\n    \n    /**\n     * Band at 4000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F4K\n     * @type {number}\n     * @readonly\n     */\n    public static F4K:number = 4000;\n    \n    /**\n     * Band at 8000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F8K\n     * @type {number}\n     * @readonly\n     */\n    public static F8K:number = 8000;\n    \n    /**\n     * Band at 16000 Hz\n     * @name PIXI.sound.filters.EqualizerFilter.F16K\n     * @type {number}\n     * @readonly\n     */\n    public static F16K:number = 16000;\n\n    /**\n     * The list of bands \n     * @name PIXI.sounds.filters.EqualizerFilter#bands\n     * @type {BiquadFilterNode[]}\n     * @readonly\n     */\n    public bands:BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @name PIXI.sounds.filters.EqualizerFilter#bandsMap\n     * @type {Object}\n     * @readonly\n     */\n    public bandsMap:{[id:number]:BiquadFilterNode};\n\n    constructor(f32:number = 0, f64:number = 0, f125:number = 0, f250:number = 0, f500:number = 0,\n        f1k:number = 0, f2k:number = 0, f4k:number = 0, f8k:number = 0, f16k:number = 0)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const equalizerBands:Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: 'lowshelf',\n                gain: f32\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: 'peaking',\n                gain: f64\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: 'peaking',\n                gain: f125\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: 'peaking',\n                gain: f250\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: 'peaking',\n                gain: f500\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: 'peaking',\n                gain: f1k\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: 'peaking',\n                gain: f2k\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: 'peaking',\n                gain: f4k\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: 'peaking',\n                gain: f8k\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: 'highshelf',\n                gain: f16k\n            }\n        ];\n        \n        const bands:BiquadFilterNode[] = equalizerBands.map(function (band:Band)\n        {\n            const filter:BiquadFilterNode = SoundLibrary.instance.context.audioContext.createBiquadFilter();\n            filter.type = band.type as BiquadFilterType;\n            filter.gain.value = band.gain;\n            filter.Q.value = 1;\n            filter.frequency.value = band.f;\n            return filter;\n        });\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node:BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#setGain\n     * @param {number} frequency The frequency, see EqualizerFilter.F* for bands\n     * @param {number} [gain=0] Recommended -40 to 40.\n     */\n    setGain(frequency:number, gain:number = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw 'No band found for frequency ' + frequency;\n        }\n        this.bandsMap[frequency].gain.value = gain;\n    }\n\n    /**\n     * Get gain amount on a specific frequency.\n     * @method PIXI.sound.filters.EqualizerFilter#getGain\n     * @return {number} The amount of gain set.\n     */\n    getGain(frequency:number): number\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw 'No band found for frequency ' + frequency;\n        }\n        return this.bandsMap[frequency].gain.value;\n    }\n\n    /**\n     * Gain at 32 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f32\n     * @type {number}\n     * @default 0\n     */\n    public set f32(value:number)\n    {\n        this.setGain(EqualizerFilter.F32, value);\n    }\n    public get f32(): number\n    {\n        return this.getGain(EqualizerFilter.F32);\n    }\n\n    /**\n     * Gain at 64 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f64\n     * @type {number}\n     * @default 0\n     */\n    public set f64(value:number)\n    {\n        this.setGain(EqualizerFilter.F64, value);\n    }\n    public get f64(): number\n    {\n        return this.getGain(EqualizerFilter.F64);\n    }\n\n    /**\n     * Gain at 125 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f125\n     * @type {number}\n     * @default 0\n     */\n    public set f125(value:number)\n    {\n        this.setGain(EqualizerFilter.F125, value);\n    }\n    public get f125(): number\n    {\n        return this.getGain(EqualizerFilter.F125);\n    }\n\n    /**\n     * Gain at 250 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f250\n     * @type {number}\n     * @default 0\n     */\n    public set f250(value:number)\n    {\n        this.setGain(EqualizerFilter.F250, value);\n    }\n    public get f250(): number\n    {\n        return this.getGain(EqualizerFilter.F250);\n    }\n\n    /**\n     * Gain at 500 Hz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f500\n     * @type {number}\n     * @default 0\n     */\n    public set f500(value:number)\n    {\n        this.setGain(EqualizerFilter.F500, value);\n    }\n    public get f500(): number\n    {\n        return this.getGain(EqualizerFilter.F500);\n    }\n\n    /**\n     * Gain at 1 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f1k\n     * @type {number}\n     * @default 0\n     */\n    public set f1k(value:number)\n    {\n        this.setGain(EqualizerFilter.F1K, value);\n    }\n    public get f1k(): number\n    {\n        return this.getGain(EqualizerFilter.F1K);\n    }\n\n    /**\n     * Gain at 2 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f2k\n     * @type {number}\n     * @default 0\n     */\n    public set f2k(value:number)\n    {\n        this.setGain(EqualizerFilter.F2K, value);\n    }\n    public get f2k(): number\n    {\n        return this.getGain(EqualizerFilter.F2K);\n    }\n\n    /**\n     * Gain at 4 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f4k\n     * @type {number}\n     * @default 0\n     */\n    public set f4k(value:number)\n    {\n        this.setGain(EqualizerFilter.F4K, value);\n    }\n    public get f4k(): number\n    {\n        return this.getGain(EqualizerFilter.F4K);\n    }\n\n    /**\n     * Gain at 8 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f8k\n     * @type {number}\n     * @default 0\n     */\n    public set f8k(value:number)\n    {\n        this.setGain(EqualizerFilter.F8K, value);\n    }\n    public get f8k(): number\n    {\n        return this.getGain(EqualizerFilter.F8K);\n    }\n\n    /**\n     * Gain at 16 KHz frequencey.\n     * @name PIXI.sound.filters.EqualizerFilter#f16k\n     * @type {number}\n     * @default 0\n     */\n    public set f16k(value:number)\n    {\n        this.setGain(EqualizerFilter.F16K, value);\n    }\n    public get f16k(): number\n    {\n        return this.getGain(EqualizerFilter.F16K);\n    }\n\n    /**\n     * Reset all frequency bands to have gain of 0\n     * @method PIXI.sound.filters.EqualizerFilter#reset\n     */\n    reset(): void\n    {\n        this.bands.forEach((band:BiquadFilterNode) => {\n            band.gain.value = 0;\n        });\n    }\n\n    destroy(): void\n    {\n        this.bands.forEach((band:BiquadFilterNode) => {\n            band.disconnect();\n        });\n        this.bands = null;\n        this.bandsMap = null;\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Filter for adding adding delaynode.\n *\n * @class DistortionFilter\n * @memberof PIXI.sound.filters\n * @param {number} [amount=0] The amount of distoration from 0 to 1.\n */\nexport default class DistortionFilter extends Filter\n{\n    /**\n     * The Wave shape node use to distort\n     * @name PIXI.sound.filters.DistortionFilter#_distortion\n     * @type {WaveShaperNode}\n     * @private\n     */\n    private _distortion:WaveShaperNode;\n\n    /**\n     * The amount of distoration\n     * @name PIXI.sound.filters.DistortionFilter#_amount\n     * @type {number}\n     * @private\n     */\n    private _amount:number;\n\n    constructor(amount:number = 0)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n        \n        const context = SoundLibrary.instance.context;\n        const distortion:WaveShaperNode = context.audioContext.createWaveShaper();\n\n        super(distortion);\n\n        this._distortion = distortion;\n\n        this.amount = amount;\n    }\n\n    /**\n     * @name PIXI.sound.filters.Distoration#amount\n     * @type {number}\n     */\n    set amount(value:number)\n    {\n        value *= 1000;\n        this._amount = value;\n        const samples:number = 44100;\n        const curve:Float32Array = new Float32Array(samples);\n        const deg:number = Math.PI / 180;\n\n        let i:number = 0;\n        let x:number;\n\n        for ( ; i < samples; ++i )\n        {\n            x = i * 2 / samples - 1;\n            curve[i] = ( 3 + value ) * x * 20 * deg / ( Math.PI + value * Math.abs(x) );\n        }\n        this._distortion.curve = curve;\n        this._distortion.oversample = '4x';\n    }\n    get amount(): number\n    {\n        return this._amount;\n    }\n\n    destroy(): void\n    {\n        this._distortion = null;\n        super.destroy();\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Filter for adding Stereo panning.\n *\n * @class StereoFilter\n * @memberof PIXI.sound.filters\n * @param {number} [pan=0] The amount of panning, -1 is left, 1 is right, 0 is centered.\n */\nexport default class StereoFilter extends Filter\n{\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_stereo\n     * @type {StereoPannerNode}\n     * @private\n     */\n    private _stereo:StereoPannerNode;\n\n    /**\n     * The stereo panning node\n     * @name PIXI.sound.filters.StereoFilter#_panner\n     * @type {PannerNode}\n     * @private\n     */\n    private _panner:PannerNode;\n\n    /**\n     * The amount of panning, -1 is left, 1 is right, 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#_pan\n     * @type {number}\n     * @private\n     */\n    private _pan:number;\n\n    constructor(pan:number = 0)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        let stereo:StereoPannerNode;\n        let panner:PannerNode;\n        let destination:AudioNode;\n        const audioContext = SoundLibrary.instance.context.audioContext;\n\n        if (audioContext.createStereoPanner)\n        {\n            stereo = audioContext.createStereoPanner();\n            destination = stereo;\n        }\n        else\n        {\n            panner = audioContext.createPanner();\n            panner.panningModel = 'equalpower';\n            destination = panner;\n        }\n\n        super(destination);\n\n        this._stereo = stereo;\n        this._panner = panner;\n\n        this.pan = pan;\n    }\n\n    /**\n     * Set the amount of panning, where -1 is left, 1 is right, and 0 is centered\n     * @name PIXI.sound.filters.StereoFilter#pan\n     * @type {number}\n     */\n    set pan(value:number)\n    {\n        this._pan = value;\n        if (this._stereo)\n        {\n            this._stereo.pan.value = value;\n        }\n        else\n        {\n            this._panner.setPosition(value, 0, 1 - Math.abs(value));\n        }\n    }\n    get pan(): number\n    {\n        return this._pan;\n    }\n\n    destroy(): void\n    {\n        super.destroy();\n        this._stereo = null;\n        this._panner = null;\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Filter for adding reverb. Refactored from \n * https://github.com/web-audio-components/simple-reverb/\n *\n * @class ReverbFilter\n * @memberof PIXI.sound.filters\n * @param {number} [seconds=3] Seconds for reverb\n * @param {number} [decay=2] The decay length\n * @param {boolean} [reverse=false] Reverse reverb\n */\nexport default class ReverbFilter extends Filter\n{\n    /**\n     * The covolver node\n     * @name PIXI.sound.filters.ReverbFilter#_convolver\n     * @type {ConvolverNode}\n     * @private\n     */\n    private _convolver:ConvolverNode;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_seconds\n     * @type {number}\n     * @private\n     */\n    private _seconds:number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_decay\n     * @type {number}\n     * @private\n     */\n    private _decay:number;\n\n    /**\n     * @name PIXI.sound.filters.ReverbFilter#_reverse\n     * @type {number}\n     * @private\n     */\n    private _reverse:boolean;\n\n    constructor(seconds:number = 3, decay:number = 2, reverse:boolean = false)\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const convolver:ConvolverNode = SoundLibrary.instance.context.audioContext.createConvolver();\n\n        super(convolver);\n\n        this._convolver = convolver;\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._decay = this._clamp(decay, 0, 100);\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Clamp a value\n     * @method PIXI.sound.filters.ReverbFilter#_clamp \n     * @private\n     * @param {number} value\n     * @param {number} min Minimum value\n     * @param {number} max Maximum value\n     * @return {number} Clamped number\n     */\n    private _clamp(value:number, min:number, max:number): number\n    {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n     * Length of reverb in seconds from 1 to 50\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {number}\n     * @default 3\n     */\n    get seconds():number\n    {\n        return this._seconds;\n    }\n    set seconds(seconds:number)\n    {\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._rebuild();\n    }\n\n    /**\n     * Decay value from 0 to 100\n     * @name PIXI.sound.filters.ReverbFilter#decay\n     * @type {number}\n     * @default 2\n     */\n    get decay():number\n    {\n        return this._decay;\n    }\n    set decay(decay:number)\n    {\n        this._decay = this._clamp(decay, 0, 100);\n        this._rebuild();\n    }\n\n    /**\n     * Reverse value from 0 to 1\n     * @name PIXI.sound.filters.ReverbFilter#reverse\n     * @type {boolean}\n     * @default false\n     */\n    get reverse():boolean\n    {\n        return this._reverse;\n    }\n    set reverse(reverse:boolean)\n    {\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Utility function for building an impulse response\n     * from the module parameters.\n     * @method PIXI.sound.filters.ReverbFilter#_rebuild\n     * @private\n     */\n    private _rebuild(): void\n    {\n        const context = SoundLibrary.instance.context.audioContext;\n        const rate:number = context.sampleRate;\n        const length:number = rate * this._seconds;\n        const impulse:AudioBuffer = context.createBuffer(2, length, rate);\n        const impulseL:Float32Array = impulse.getChannelData(0);\n        const impulseR:Float32Array = impulse.getChannelData(1);\n        let n:number;\n\n        for (let i:number = 0; i < length; i++)\n        {\n            n = this._reverse ? length - i : i;\n            impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n            impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, this._decay);\n        }\n        this._convolver.buffer = impulse;\n    }\n\n    destroy(): void\n    {\n        this._convolver = null;\n        super.destroy();\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Combine all channels into mono channel.\n *\n * @class MonoFilter\n * @memberof PIXI.sound.filters\n */\nexport default class MonoFilter extends Filter\n{\n    /**\n     * Merger node\n     * @name PIXI.sound.filters.MonoFilter#_merge\n     * @type {ChannelMergerNode}\n     * @private\n     */\n    private _merger:ChannelMergerNode;\n\n    constructor()\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n        }\n        const audioContext:AudioContext = SoundLibrary.instance.context.audioContext;\n        const splitter:ChannelSplitterNode = audioContext.createChannelSplitter();\n        const merger:ChannelMergerNode = audioContext.createChannelMerger();\n        merger.connect(splitter);\n        super(merger, splitter);\n        this._merger = merger;\n    }\n\n    public destroy(): void\n    {\n        this._merger.disconnect();\n        this._merger = null;\n        super.destroy();\n    }\n}\n","import Filter from './Filter';\nimport SoundLibrary from '../SoundLibrary';\n\n/**\n * Creates a telephone-sound filter.\n *\n * @class TelephoneFilter\n * @memberof PIXI.sound.filters\n */\nexport default class TelephoneFilter extends Filter\n{\n    constructor()\n    {\n        if (SoundLibrary.instance.useLegacy)\n        {\n            super(null);\n            return;\n        }\n\n        const {audioContext} = SoundLibrary.instance.context;\n        const lpf1 = audioContext.createBiquadFilter();\n        const lpf2 = audioContext.createBiquadFilter();\n        const hpf1 = audioContext.createBiquadFilter();\n        const hpf2 = audioContext.createBiquadFilter();\n\n        lpf1.type = 'lowpass';\n        lpf1.frequency.value = 2000.0;\n\n        lpf2.type = 'lowpass';\n        lpf2.frequency.value = 2000.0;\n\n        hpf1.type = 'highpass';\n        hpf1.frequency.value = 500.0;\n\n        hpf2.type = 'highpass';\n        hpf2.frequency.value = 500.0;\n\n        lpf1.connect(lpf2);\n        lpf2.connect(hpf1);\n        hpf1.connect(hpf2);\n\n        super(lpf1, hpf2);\n    }\n}\n","import Filterable from \"./Filterable\";\nimport * as filters from \"./filters\";\nimport * as htmlaudio from \"./htmlaudio\";\nimport Sound from \"./Sound\";\nimport SoundLibrary from \"./SoundLibrary\";\nimport SoundSprite from \"./sprites/SoundSprite\";\nimport utils from \"./utils/SoundUtils\";\nimport * as webaudio from \"./webaudio\";\n\n/**\n * Global namespace provided by the PixiJS project.\n * @namespace PIXI\n * @see https://github.com/pixijs/pixi.js\n */\nconst sound = SoundLibrary.init();\n\nexport {\n    filters,\n    htmlaudio,\n    webaudio,\n    sound,\n    utils,\n    Sound,\n    SoundSprite,\n    Filterable,\n    SoundLibrary\n};\n"],"names":["assign","target","firstSource","undefined","TypeError","to","Object","i","arguments","length","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","polyfill","defineProperty","configurable","writable","value","input","output","this","_output","_input","Filterable","_filters","filters","forEach","filter","disconnect","connect","slice","prevFilter_1","_this","destination","source","Filter","root","noop","bind","fn","thisArg","apply","Promise","_state","_handled","_value","_deferreds","doResolve","handle","self","deferred","push","_immediateFn","cb","onFulfilled","onRejected","resolve","reject","promise","ret","e","newValue","then","finale","_unhandledRejectionFn","Handler","done","reason","ex","setTimeoutFunc","setTimeout","prototype","prom","all","arr","args","Array","call","res","val","remaining","constructor","race","values","setImmediate","err","console","warn","_setImmediateFn","_setUnhandledRejectionFn","module","exports","id","parent","_super","init","tslib_1.__extends","HTMLAudioInstance","_duration","_paused","paused","refreshPaused","_playing","media","duration","_source","cloneNode","src","url","onplay","_onPlay","onpause","_onPause","context","on","refresh","_media","onended","pause","_internalStop","emit","_speed","speed","_volume","volume","_loop","loop","_muted","muted","global","sound","globalVolume","soundVolume","instanceVolume","playbackRate","pausedReal","_pausedReal","play","start","currentTime","end","_end","options","assert","_start","Math","max","PADDING","min","onloadedmetadata","PIXI","ticker","shared","add","_onUpdate","_onComplete","progress","remove","removeAllListeners","off","utils","EventEmitter","HTMLAudioMedia","Audio","readyState","load","callback","isLoaded","instance_1","autoPlayStart","Error","removeListeners","removeEventListener","onLoad","onAbort","onError","instance","message","error","code","addEventListener","HTMLAudioContext","SoundSprite","complete","_elapsed","_updateListener","_update","WebAudioInstance","_gain","gain","_a","buffer","_lastUpdate","_now","_enabled","time","enabled","script","nodes","_progress","events","audioContext","force","now","delta","stop","bufferSource","createBufferSource","createScriptProcessor","WebAudioNodes","BUFFER_SIZE","createGain","analyser","createAnalyser","destroy","orig","WebAudioMedia","_nodes","isPlayable","_loadUrl","_decode","request","XMLHttpRequest","open","responseType","onload","response","send","arrayBuffer","decode","_instances","_sprites","_autoPlayOptions","isPlaying","autoPlay","singleInstance","preload","sprites","addSprites","_preload","loaded","Sound","ArrayBuffer","HTMLAudioElement","SoundUtils","resolveUrl","freeze","SoundLibrary","useLegacy","data","results","alias","sprite","_removeInstances","removeSprites","name_1","offset","_createInstance","once","_poolInstance","index","indexOf","splice","_pool","pop","create","glob","FORMAT_PATTERN","test","match","exec","exts","split","replace","ext","supported","resolved","extension","hertz","seconds","from","createBuffer","fArray","getChannelData","angle","sampleRate","PI","sin","canvas","document","createElement","width","height","fill","baseTexture","BaseTexture","fromCanvas","getContext","fillStyle","step","ceil","amp","j","datum","fillRect","PLAY_ID","types","m4a","oga","audio","formats","extensions","type","canByExt","canPlayType","canByType","LoaderMiddleware","_sound","legacy","Loader","loaders","SoundLoader","baseUrl","concurrency","use","plugin","pre","loader","Resource","setExtensionXhrType","XHR_RESPONSE_TYPE","DEFAULT","setExtensionLoadType","LOAD_TYPE","AUDIO","BUFFER","XHR","resource","next","name","ctx","WebAudioContext","AudioContext","compressor","createDynamicsCompressor","_ctx","_offlineCtx","OfflineAudioContext","_unlocked","window","state","_unlock","playEmptySound","win","webkitAudioContext","webkitOfflineAudioContext","close","suspend","resume","decodeAudioData","_webAudioContext","_htmlAudioContext","_sounds","_context","ObjectAssign","PromisePolyfill","install","__pixiSound","PixiJS","get","defineProperties","htmlaudio","webaudio","sourceOptions","_getOptions","overrides","_useLegacy","exists","togglePause","toggleMute","find","removeAll","f32","f64","f125","f250","f500","f1k","f2k","f4k","f8k","f16k","bands","f","EqualizerFilter","F32","F64","F125","F250","F500","F1K","F2K","F4K","F8K","F16K","map","band","createBiquadFilter","Q","frequency","bandsMap","node","getGain","setGain","amount","distortion","createWaveShaper","_distortion","DistortionFilter","_amount","x","curve","Float32Array","deg","abs","oversample","pan","stereo","panner","createStereoPanner","createPanner","panningModel","_stereo","_panner","StereoFilter","_pan","setPosition","decay","reverse","convolver","createConvolver","_convolver","_seconds","_clamp","_decay","_reverse","_rebuild","ReverbFilter","n","rate","impulse","impulseL","impulseR","random","pow","splitter","createChannelSplitter","merger","createChannelMerger","_merger","MonoFilter","lpf1","lpf2","hpf1","hpf2"],"mappings":"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"}